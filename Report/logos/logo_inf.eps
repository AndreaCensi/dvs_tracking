%!PS-Adobe-3.1 EPSF-3.0%%Title: logo_inf copy.eps%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: Patrick Knab%%CreationDate: 11.2.2005%%BoundingBox: 0 0 281 63%%HiResBoundingBox: 0 0 280.6749 62.3409%%CropBox: 0 0 280.6749 62.3409%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (logo_inf copy.eps) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about='uuid:1d522cb5-7c3d-11d9-ba35-000d933beb96'
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
  <pdf:Producer>Adobe PDF library 6.66</pdf:Producer>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:1d522cb5-7c3d-11d9-ba35-000d933beb96'
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:1d522cb5-7c3d-11d9-ba35-000d933beb96'
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2005-02-11T13:58:06+01:00</xap:CreateDate>
  <xap:ModifyDate>2005-02-11T14:57:45Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:MetadataDate>2005-02-11T13:58:06+01:00</xap:MetadataDate>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>60</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAPAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9SzzwW8Ek88ixQRKXllc&#xA;hURFFWZmOwAG5JxV5bqP5ieYvM1x9W8pPHpGimSOE+YL3hHJM0xAiFus6vHF6pZfSMkcjvUFYeBE&#xA;mKsd/wAO+V7r80I/JvmK8l1y7ktPVlmviLoPcsDOsSw3v1tFC28RZjEEG60Ub4qmX5j/AJdflp5P&#xA;8o3ut2uk21tdx8IrMwW1lEzXEziOLlL6HNERm5yFGBCgntiq6wm816Lp2kax5a14anp2sW4urHQN&#xA;UleaSWMxiQpF6rzXZeNGqxhkenRYDir0Hyb540vzRbSeirWmp2vEX+mTFTJEWJCsrKSksTlTwkQl&#xA;TQjZgyhVkeKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5P&#xA;+ZGsfp/zA3lZZvQ0HSAl35gmIUrLKAksdsQ54uI1kicxmvOSSFSCnqDFUB5a8t6155/46Mv1Dyjb&#xA;Skpp8AJMrJL6iK/1qMXUF5FIZFupdmeu25PBVgNxeXP/AENLNrq2aufrMOntCJo6xxrNb6cbqv26&#xA;n1F+DhWjUrTfFWQ/85Na39c/LmwgmZXjbXrpZpFZaKumtckRMm1S0Ue9T17GuKp75P8AKEXnH8q9&#xA;JuEi/R2p6ebyz08ep6scIg1KkrRBfgim42rRxzoOUfLktdsVSPT9T1a6uDr8Nquk+dNInuD+jLiW&#xA;Bbm9sYXSCa4uo42f0Y5ZgYpC9fhCzB39KrqvdNC1my1vRrLV7Fi1pfQpNFyFGAcV4uv7LKdmHY7Y&#xA;qxHUdc1aP87dG0VLp10q40K8uprMU4NNHcRIjn3CsRiqJ8x6xqdv+aXkzS4Lh49P1C01mS8th9iR&#xA;rdbUxFv9T1Gp88VQ15+e35U2c0kNxryq8MrwXJW3unWCSKZoGE7JEywj1EIBkIB6io3xVF+Yb6xg&#xA;86eXb2TzFPaQ/UtRuE0SCOWaC/ihijaSZmi5LWASKyChLV+HFUzk89eVI/Jw85PfqPLZt1uxf+nK&#xA;R6L0Ct6YX1akmnHjyrtTFUu80fm5+Xvle+Ww1zVhbXphFw9ukFzO8ULEAPOII5PRU1/3ZxxVEeZf&#xA;zN8ieWYLG41vV4rWDU4ZLnT5QskqTxRenyaNolkDf36cR1avw1xVBa3+cn5b6JLbxalq5jmubaO9&#xA;SKO2up3S3mAMckywxSGEMD/u3jirepa5pOl/mDez3uv3C/U/L63Vx5cSCeWJIFu3Bv19NXDyMR6X&#xA;BQXoMVSPyH+fXlLX9HtLjU52sdRu79tPSEWl6IfUlu5YLNRM8Xp1kSNS3xUVjRuPTFWfXHmLRrfX&#xA;rPQJbimr30MtzbWoR2LQ25VZHZlUogBkUDkRXtXFVnmbzR5f8saRLq+vXsdhp0JCvNJU1ZjRVRFD&#xA;O7HsqgnFUl0r82fIGrafqd/Yam00Wjqr6lB9Vukuolb7LG1eJbhg3YrGa4qwb/nHW48p6xDqvmOF&#xA;ri58431zeNrN7cR3iA2730wtY0aYLAVWOJfhj3ToadMVZ15y8l6prl3FeWvm3VPL0MEPCSDT2gWJ&#xA;qMWMj+rHIa0NOvQYqwn8ofM1/p/lPzD5w80+YL2+8pvfeloN5qCmSY2cUn1cXHGCMGlxM+wCbAV9&#xA;8Veo6n5k0XS9R0vTr649G81mV7fTYuEjerJHGZXXkqsq0RSasQMVSSH8z/IupeY5PKNlrHLzE0lz&#xA;am0SGfnHLbIxlLNwCIF4nizMFYiiknFUB5Y83eWPLn5W6Zrmseam1TSBFVfMV8ksct16kjFP3Thp&#xA;i/7IWhagxVjXnv8ANHyjrflzSdV0PV2Wy03zPoqarPJHcWfpRm6V3EouEhbgY6k7UpirOPKX5n+R&#xA;vNt9PYaDqX1m9t4luJLaSC4tpPRc8RKi3EcRdK7clqOniMVZVirsVdirsVfMuseYbiPyXDLBJbfp&#xA;Pz5feuEvYGuILu3mMd2lvQBuBrqKQ8yNvTVdiBir6M0TSbXRtGsdJtK/VdPt4raDkanhEgRa/QMV&#xA;fKvmuC/0T80r7zncaHcPoFh5jrc6jEkDljFcRzuqD1BKxpFUArT5HFUo1nzXb+dtJHlnSdLvNQ1y&#xA;+1vU9WtLeePkiJqKzD0la5MSl4eYYdjsf5hir6L/ACD9RPy1s4JbT6jNb3V9HLbbVV/rcjODxLD7&#xA;TeOKoH8xJX0TzjpFzbaVPd2muuIdZa3nFtbLEpS3mlvFYiKflDMqoHBb4KIy/FiqaflNJLbw6/ok&#xA;rlzpmpycGY1LeuqvO/U0D3guGA8CMVQOvOlt/wA5BeVZJyES+0LUra1J/bljmhmdB7hN8VV/MtzH&#xA;N+eXkmzj+Ka00rWbm4A34RTm1iRm8AXjIxVjflfTbCD8rPzTSKBFWbVPNImFK8wjSxryrWtEUDfF&#xA;W/K8jzat+SUkp5PJ5WvWc0G5ay04nYYqxqxjLpYfky2y2fm6bnbtX4tCtP8AczFy/wAlvUjjH+1i&#xA;qZ+VrX8wdQ83/mZHo8egzfWdZe11KPV/rZuWtRbIlsn7j4fRMLHjXvyxVU0/yje+XPOH5K+Xdalh&#xA;v73SLPX4zPGGaOscEPpFPUAb4E4gbdsVT3zpp3mzyF5k8w/mXoCW+raPf20E3mjRbgmG4WPToSgn&#xA;s5xVfhi3aNxvvTc7Kqmianbar+fsep2vL6tf+RrS5g5ijenNqMjryG9DRsVSHS/L8+u/8406hZ2t&#xA;fr8E+r32nsv2hc2WsXNzDx9y8QX6cVTn8qtcg89ee9b89witjbaZp2j6cw6BpohqN6njVZJ4kP8A&#xA;q4qjPzQWKX8xvyvgvwp0ltUvZJFkp6f1yOxc2Va/t+rXh74q7WRFH/zkN5bNnRbubQNQGqcPtNbL&#xA;PEbcyf5Pq8uPviqO/Ij/AMlnZf8AMdq//dWusVQ35z6lqN/a6Z+X2iStFrPnCU29xcRn4rXS4qNf&#xA;XHt+7PpqD9ottviqz86tP07RvyQ1TT7ONbbTtPgsoIIxsscMN1Aqj6FXFXfmdIg/Mf8AK+MsA7ap&#xA;esqV3IWwkBIHtyGKq35OWdtFcefLlI1W4uPNeo+tLQcmEYjCAnrRamg9z44q818nfV2078g4tRAO&#xA;kMmoP+8p6X6QS3/0HlXbnyL+n/lYq9K/PCztbzQ/LtpdRLNbXPmbRIbiJhVXje8VWVvYgkYqpeZP&#xA;h/PvyWy/C0mkaukhGxZVaBgp8QDvir0vFXYq7FXYq+cLHWJtN8u/l5eV4LYSpZXixzG3UXBtbGWS&#xA;NlRonZI0jlLIZAnwVZXoBir6PxV8267qui/4untNTuJZ7aPzRI91ZvYvcRmD1l5x0FvJzV+O9G7D&#xA;Y4qkUh0bTYrc3cS22oNr2qXEEsOlywt+ip7aX6vCXa0WindaAHiN+2KvcPyRmE/kl5RK84fUtRYT&#xA;SRmJ2rdybtGVQqfagxVL/wA4g19qflrR4oluGkuvXnhkj1BkVRJFHE7Pp4Yxn1XHAzD0wwDE/AAy&#xA;qa/lzKbnW/NdwlDAl96COK7ktJdg+G8d5Gw9jiqcec/IXlvzhZ29vrMMhkspRcWF5byvb3NvMP24&#xA;ZoyrKfw+4Yqh/KH5a+WfKt7ealYi5u9X1BVS81bUbmW8u3jQ1WP1ZmYhAd6Dr36DFUZa+StDtdG1&#xA;nR4lkFlrs97c6gC5LGTUWZrji37IJc08MVWWPkTQLKXy5LAkgfyrZSabpNXJ428scUTCT+c8bdN8&#xA;VWxeQPLMXnqbzwtuf8QT2gsJJyx4ekCDUJ050ULy8NsVS3zR+UflPzDrEusyvfabqt1CLa+u9LvJ&#xA;7J7mFRRUnETBZAo2FR028MVTKHyD5chvfLV3FFIknlK2lstGX1GYJDPDHAwflUufThWhJriqV+Zf&#xA;yg8q+Y9Uu77U7jU2h1AxNqOlxahcw2FwYUWNfVtkcIfgjUGlOnjiqeW/lDQ7fzQPMsETR6iumpo6&#xA;BTSJbSKUzIqxjYEO3XwxVjjaL5K/K6w1nzKsuoR6bOzyy6aslxeQLNcS8iLa1HMRtLK1CQAPEgYq&#xA;pfkJ5Uby3+WOmW8tn9QvL9pdSu7QgqY2u5C8cbK24McPpoQd9sVZR5u8naB5t0c6VrduZ7YSJPC6&#xA;O0UsM8RrHNDKhV0da7EH26HFUD5R/Ljy55XvLzUbM3V7q2oKiXeq6lcy3t28cf2I/VmZiEXwH09B&#xA;iqa+WvLmmeXNHj0jTFdbOKSeZBI3NuVzO9xJuf8AiyVqYqxzzf8AlF5Y80+YYvMN7c6jZ6rDaCwW&#xA;fT7yW0Jt1kaXifToTV3qfo8MVVdH/Knyzp2k6vpE0+oatp2txLBfQapezXY9NQ4pGXasdfUNSpB2&#xA;HhiqC0b8kvJelavpmsK+oXup6O1dOub++numhjETRCBBKzKsQWQ/CoG9PAYqyvQvLemaH+kfqCuv&#xA;6UvZtSu+bcq3FxT1CvgPhG2KpLN+Vfku48j2nkq6s2uNDsFQWaPI4mieMkpIkyFXV15GjA/hiqhp&#xA;/wCUnliztEt2uNRvTHf2eqCe+vZrqU3Fg/O3+OUseCkbqNjiqe3nlbSbvzNp3mSZXOp6XBPbWjBi&#xA;EEd1x9Tkvc/uxTFU4xV2KuxV2Kvnzz7H/hnU9X0S5sZrjTNQul1LT3tzbhkhupX+scRcxzRV9e6k&#xA;gc8eSiSDjvTFU9s/z0uLOyhtofKF99XtoAEd7lH/AHcSkVZ2U1YLGSamuxOKsOuPOV5dOTceUJ3a&#xA;41eXV2Z5VH+hEsJYGJUcTWF+Vf5G/lNFVCb8zNB1+90rUdC8ns1tpTW8OoRxzK5ls1triG1g4hfs&#xA;hZZCppQryPTFWQ+Tvza1fy7pd1YT+U7ueQ3dzeExyr9m6n5qFHAliDMinj3I8cVXaz+a2m6jq9pq&#xA;dz5SmtNasY2On6vJOri2WSBm9Uog/eqsU3PgKluQA3daqvVfy60GfRfKttDdRmK+ui13eRMeTRvL&#xA;ukLN+16EQSGvfhiqV675j88Hzve6H5eXTpIdO0i11Rra9jm9W5kubi5hMSXEcoWEcbUUJhfc4qoa&#xA;V+dfljUbSwvIrW8+o3aWi3F+qRtb2t3fwLcQWcrF1kMrK6iqRsgLLyYVGKojQPzZ03XdMN3p2ias&#xA;900NpdW2lvDAlzPa34Y29zGTP6AiYxOObyrQrv1FVUr1X88dPTRtRvNF0TUdSurDR5tZnjIt4Y7d&#xA;IZbm3eO5eSdCGjnspFdYg5pugbFVY/nZp8UssFz5c1lJbWaytLwpHaSRx3eowxzWtuGS5PNpfXRP&#xA;gBCsfiKgg4qiv+VzeVzaRXUdrfSwrEbjVmWOL/cbELl7NmvKyj7NxBKhEPqH4Gb7I5YqlWufnvp1&#xA;poesX1homoS3Fhb6hNYC5EEMF3+irgWt20biZm4QyOpaqhiv2AzAgKsz1nzfDpGnadcXWnXbajqs&#xA;qW1lokf1d7x7h42lMVfW+rgokbM7etwAH2sVYla/mJf+YfP/AJd03R47630O4sdQvNQYJZK31iyu&#xA;orR7e5E7vKiQSMyyCJQ5dk4kpzIVVG/N42fmDVtFutIu9RurfULy30+LTI4i31WwsrC5nkna4nhQ&#xA;MG1DanUClOVOSqWL+bs0vniUxQajc+X30/Sn0G0s47AjULjVxPLGzetIs6kxQFkq0aqI5DJ+xyVT&#xA;aT88PLKwXc6abqcsWm6bJquqlYoFNpHDNcW8kMyyTI3rrPZPHwUNvQ141YKoqx/N7RrnVhpVxpGq&#xA;2F0JzZyC5giol2bVr6K3IillYyTWqmRAoI/ZYq5C4qg9a/OF7O3KW3lrUW1WLUNLs7nS7k2kMywa&#xA;tN6UE6n6wYz6nF0RS4IfaTgKkKonQ/zLtp7mbTlhvtY1CO+v1uhDb28P1K1t9QltFeflOEaONoyi&#xA;shaRwpbh1AVZB5P83W/mnS11Wzsbq106dUlsbm6EAW5hkFVliEUszKp/lkCuO6jFU+xV2KuxV2Ku&#xA;xV2KuxV2KuxVjvnfydbeZ9KWD1PqupWjGbTL8AsYpSpUhgCpaORSVkXkKjoQwVgq80k13X7Bbby7&#xA;eWWnad5ij1BdSludV+svbziJPjuopLcoXblwJloEC8vVSIkBlU78y6F5ou/J2uSXEeiXun6latda&#xA;ktoLoNcenb8j6LNNwqXQcKnjT7XU4q8y/Iuy85Pd6xLpOnW36YFx9f8ArusIVjt1vI7iMootbhmP&#xA;J4VAXifTUOCfiFFXolxqOqeUbywbWn8vpp+jmZ47Sx+t/XIvrTONmll9JBIrgfvdmb7O/EYqi/KH&#xA;k7UNb1aLzDrlmNP0iCQ3OkaIwcOZmk9UTzLIA6KrgOkbgMW4u6pwjjjVeoYqwvzB5F16/wDNN1rW&#xA;l68ukxahpsGlX0YtPXuRHbzTzCS2naZY4nb60R8cL0pUYqx+T8jNB03UHv8ARbfTVtlS3dbe80yK&#xA;9vo3srdIIls753V4AywoTVHIarKVJxVKPK35M6pqXkTRJdc1FTrH6O0aJbC+sOVrFbadBIyWF9Zm&#xA;WM3HGS7cvydPiVDQFd1U88v/AJIWmk6HrGkNqnqwavo1xojmG2S3ESXN5f3ZkjRWZBx/SXBUAoOH&#xA;vQKo62/Ky69C5N9q6TXd3q+j6xNLDamGPlo6WiCJY2mlIEosvtc/h5dDTdVJ2/IHTFuRdLNpt7cS&#xA;m5W7bVtJh1FfTn1C4vkNsssq+hKn1xo2b4lcAEpUDFUZqH5J299o66XLqzrGtr5htPUWAcv+dhvF&#xA;u+W7n/efhxp+31+HFWT6/wCVNU1e00W4/SUNt5j0O4F5baitszWzTNBJbzK1qZ+fpSRzMOPrch/N&#xA;iqA8rflrFoOs2OrfpBru5gtdShvS8QU3Fxq19FfzXGzEIBJEQEodj123VUrf8r0h833vmP8ASRb6&#xA;5JqMn1X0acf0lbafbEc+e/p/ozl9nfnTbjuqldr+S8llFp8tlrfp6npFpolvp11Ja84lm0SC6tjJ&#xA;LCJlLpcRXzqUDqV7McVWr+SMf6K8xWj6y0l15l0p9Pvrw24H+kz3l5ez3QQSAUaS/IWKvwhftHFU&#xA;w1/8pk1jUdQvDq81mdQ1RdUrbpxli46K2kcI5eezjn6wkpsdqd8VSbSfyIOmWuofVdTsrW9updGu&#xA;bY2Wlra2sc+h3L3ETy26XBaYzFwJT6qsTuCNgFU30n8r9U0TWpta0bXI4L++uLt9UE9kZoZre6v5&#xA;r9IkQTxNG8L3MiiTmQQd16UVTXyL5Gn8tXWrXlxeW88+rPC8sFhafo+zRoVYGVbcS3H76YvWWTl8&#xA;VF2FMVZbirsVdirsVdirsVdirsVdirsVQOr6JpGs2Zs9UtIry2JDCOVQ3F1+y6Hqrr2Zdx2xVht5&#xA;+UNnxnTS9b1GwiuQy3FuZFmWRWBBWWZgt5IKHo9wcVS3RPyJ0/RZLg6TqsukpecPrv6OjaNp/TJK&#xA;eqLmW7jfjyanKM/aOKss0H8uvKuizx3UNsbm+iJaK7um9Vo2b7RgSght+Xf0UQHFWTYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//Z</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:1d522cb5-7c3d-11d9-ba35-000d933beb96'
  xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/'>
  <xapMM:DocumentID>uuid:1d5224f7-7c3d-11d9-ba35-000d933beb96</xapMM:DocumentID>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:1d522cb5-7c3d-11d9-ba35-000d933beb96'
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -62.3409 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 62.3409 li280.675 62.3409 li280.675 0 liclp[1 0 0 1 0 0 ] concat65.4244 10.6714 mo67.0362 10.6714 li67.0362 22.1114 li67.0362 24.8414 67.5562 27.4932 70.8062 27.4932 cv74.2124 27.4932 74.5762 24.5552 74.5762 22.1114 cv74.5762 10.6714 li76.1885 10.6714 li76.1885 22.1373 li76.1885 25.7251 75.0181 29.0015 70.8062 29.0015 cv66.5943 29.0015 65.4244 26.0372 65.4244 22.1373 cv65.4244 10.6714 lifalse sop/0 [/DeviceCMYK] add_csa0 0 0 1 cmykf80.0362 19.6675 mo80.0362 18.2896 79.9581 16.9376 79.9322 15.5591 cv81.336 15.5591 li81.3882 16.1573 81.4141 16.5474 81.44 17.5093 cv81.4922 17.5093 li81.8042 16.9376 82.6622 15.3775 84.8721 15.3775 cv88.5381 15.3775 88.5381 19.0435 88.5381 19.9273 cv88.5381 28.8194 li87.0298 28.8194 li87.0298 19.8755 li87.0298 18.9654 87.0298 16.7813 84.5601 16.7813 cv82.7139 16.7813 81.544 18.5235 81.544 20.5772 cv81.544 28.8194 li80.0362 28.8194 li80.0362 19.6675 lif92.2042 15.5591 mo93.712 15.5591 li93.712 28.8194 li92.2042 28.8194 li92.2042 15.5591 licp92.0479 10.2813 mo93.8677 10.2813 li93.8677 12.6211 li92.0479 12.6211 li92.0479 10.2813 lif95.896 15.5591 mo97.5079 15.5591 li100.654 27.1036 li100.706 27.1036 li103.956 15.5591 li105.464 15.5591 li101.59 28.8194 li99.7701 28.8194 li95.896 15.5591 lif114.148 21.2793 mo114.148 17.7696 112.666 16.7813 111.444 16.7813 cv109.39 16.7813 108.428 19.5635 108.428 21.2793 cv114.148 21.2793 licp108.428 22.6832 mo108.428 27.5972 111.574 27.5972 112.172 27.5972 cv113.03 27.5972 114.278 27.1812 115.032 26.5054 cv115.11 28.2476 li114.486 28.5855 113.602 29.0015 112.016 29.0015 cv106.816 29.0015 106.816 23.5152 106.816 22.1895 cv106.816 17.1973 109.286 15.3775 111.522 15.3775 cv115.37 15.3775 115.76 19.4595 115.76 22.6832 cv108.428 22.6832 lif118.594 19.6675 mo118.594 18.2896 118.516 16.9376 118.49 15.5591 cv119.894 15.5591 li119.92 16.3394 119.972 17.1192 119.998 17.6656 cv120.05 17.6656 li121.012 15.7671 122.13 15.3775 123.586 15.3775 cv123.586 16.9893 li121.194 16.9893 120.102 18.0293 120.102 20.4732 cv120.102 28.8194 li118.594 28.8194 li118.594 19.6675 lif131.308 17.3272 mo130.554 17.0416 129.904 16.7813 129.046 16.7813 cv127.486 16.7813 126.784 17.9512 126.784 18.8873 cv126.784 20.1094 127.252 20.3692 129.046 21.3575 cv130.866 22.3453 132.27 23.0215 132.27 25.1534 cv132.27 27.5455 130.58 29.0015 128.344 29.0015 cv126.706 29.0015 125.77 28.6631 124.99 28.3775 cv125.198 26.6876 li125.64 26.9996 126.992 27.5972 128.214 27.5972 cv129.644 27.5972 130.658 26.5054 130.658 25.3096 cv130.658 24.0352 129.852 23.5152 128.292 22.7354 cv126.056 21.6172 125.172 20.9156 125.172 19.0435 cv125.172 16.5474 127.304 15.3775 129.072 15.3775 cv129.956 15.3775 131.022 15.6114 131.516 15.7671 cv131.308 17.3272 lif135.104 15.5591 mo136.612 15.5591 li136.612 28.8194 li135.104 28.8194 li135.104 15.5591 licp134.948 10.2813 mo136.768 10.2813 li136.768 12.6211 li134.948 12.6211 li134.948 10.2813 lif142.462 12.4395 mo142.462 15.5591 li145.166 15.5591 li145.166 16.9634 li142.462 16.9634 li142.462 25.5953 li142.462 26.6612 142.644 27.5972 143.918 27.5972 cv144.62 27.5972 144.88 27.4415 145.166 27.3116 cv145.166 28.8194 li144.802 28.9493 144.126 29.0015 143.424 29.0015 cv141.474 29.0015 140.954 27.4932 140.954 26.0113 cv140.954 16.9634 li138.978 16.9634 li138.978 15.5591 li140.954 15.5591 li140.954 12.9073 li142.462 12.4395 lif150.574 26.5835 mo150.626 26.5835 li153.59 15.5591 li155.098 15.5591 li150.756 31.2896 li150.262 33.0835 149.846 34.5914 147.74 34.5914 cv147.324 34.5914 147.09 34.5396 146.726 34.4356 cv146.804 32.9014 li147.063 33.0835 147.532 33.1876 147.87 33.1876 cv148.598 33.1876 148.988 32.4854 149.222 31.6534 cv149.897 29.1314 li145.998 15.5591 li147.61 15.5591 li150.574 26.5835 lif170.983 22.1895 mo170.983 21.1236 170.983 16.7813 167.629 16.7813 cv164.275 16.7813 164.275 21.1236 164.275 22.1895 cv164.275 23.2554 164.275 27.5972 167.629 27.5972 cv170.983 27.5972 170.983 23.2554 170.983 22.1895 cvcp162.663 22.1895 mo162.663 18.8614 163.755 15.3775 167.629 15.3775 cv171.503 15.3775 172.595 18.8614 172.595 22.1895 cv172.595 25.5171 171.503 29.0015 167.629 29.0015 cv163.755 29.0015 162.663 25.5171 162.663 22.1895 cvf176.105 16.9634 mo174.051 16.9634 li174.051 15.5591 li176.105 15.5591 li176.105 12.7251 li176.105 10.7232 176.651 9.00733 179.355 9.00733 cv179.875 9.00733 180.239 9.08545 180.499 9.13721 cv180.499 10.6456 li180.239 10.5416 179.823 10.4112 179.303 10.4112 cv177.977 10.4112 177.613 11.3736 177.613 12.4395 cv177.613 15.5591 li179.953 15.5591 li179.953 16.9634 li177.613 16.9634 li177.613 28.8194 li176.105 28.8194 li176.105 16.9634 lif187.57 27.2076 mo195.344 12.1792 li187.831 12.1792 li187.831 10.6714 li197.061 10.6714 li197.061 12.2315 li189.26 27.3116 li197.243 27.3116 li197.243 28.8194 li187.57 28.8194 li187.57 27.2076 lif208.448 24.7115 mo208.448 26.0894 208.526 27.4415 208.552 28.8194 cv207.148 28.8194 li207.096 28.2212 207.07 27.8316 207.044 26.8692 cv206.992 26.8692 li206.836 27.4415 205.822 29.0015 203.612 29.0015 cv200.726 29.0015 199.946 26.9214 199.946 24.8155 cv199.946 15.5591 li201.454 15.5591 li201.454 24.5035 li201.454 25.4131 201.454 27.5972 203.924 27.5972 cv205.77 27.5972 206.94 25.8555 206.94 23.8013 cv206.94 15.5591 li208.448 15.5591 li208.448 24.7115 lif211.984 19.6675 mo211.984 18.2896 211.906 16.9376 211.88 15.5591 cv213.284 15.5591 li213.31 16.3394 213.362 17.1192 213.388 17.6656 cv213.44 17.6656 li214.402 15.7671 215.52 15.3775 216.976 15.3775 cv216.976 16.9893 li214.584 16.9893 213.492 18.0293 213.492 20.4732 cv213.492 28.8194 li211.984 28.8194 li211.984 19.6675 lif219.342 15.5591 mo220.85 15.5591 li220.85 28.8194 li219.342 28.8194 li219.342 15.5591 licp219.186 10.2813 mo221.006 10.2813 li221.006 12.6211 li219.186 12.6211 li219.186 10.2813 lif231.692 17.5616 mo231.094 17.0674 230.08 16.8853 229.3 16.8853 cv227.272 16.8853 225.426 18.2896 225.426 21.7994 cv225.426 26.6612 228.104 27.4932 229.534 27.4932 cv230.132 27.4932 231.328 27.3116 231.77 26.7916 cv231.9 28.5074 li231.25 28.7935 230.262 29.0015 229.326 29.0015 cv226.492 29.0015 223.814 26.8174 223.814 22.2413 cv223.814 18.1856 225.608 15.3775 229.3 15.3775 cv230.366 15.3775 231.146 15.5855 231.77 15.8453 cv231.692 17.5616 lif234.136 9.31934 mo235.644 9.31934 li235.644 17.5093 li235.696 17.5093 li235.956 16.9376 236.866 15.3775 238.972 15.3775 cv242.638 15.3775 242.638 19.0435 242.638 19.9273 cv242.638 28.8194 li241.13 28.8194 li241.13 19.8755 li241.13 18.9654 241.13 16.7813 238.66 16.7813 cv236.814 16.7813 235.644 18.5235 235.644 20.5772 cv235.644 28.8194 li234.136 28.8194 li234.136 9.31934 lif35.1724 13.376 mo35.171 11.6299 li35.1724 9.90137 li35.1724 13.376 licp19.8721 17.9253 mo19.8721 15.4043 li20.0054 15.4043 li20.0054 17.9253 li19.8721 17.9253 licp21.7295 16.4927 mo21.7359 16.941 21.733 17.2881 21.7305 17.4278 cv22.0679 17.4278 li22.4039 17.4278 li22.4029 17.3716 22.4019 17.2818 22.4019 17.1666 cv21.9747 17.1666 li21.9747 16.2984 li21.9747 16.2984 21.9566 16.0489 22.1973 15.8145 cv22.149 15.7627 22.1016 15.7295 22.0679 15.7129 cv21.9595 15.7662 21.7222 15.9693 21.7295 16.4927 cvcp21.5967 16.4947 mo21.5923 16.1622 21.7027 15.7012 22.0679 15.5699 cv22.4317 15.7012 22.543 16.1622 22.5376 16.4947 cv22.5293 17.0831 22.5391 17.5601 22.5391 17.5601 cv22.0679 17.5601 li21.5953 17.5601 li21.5953 17.5601 21.6045 17.0831 21.5967 16.4947 cvcp21.4043 16.2598 mo21.4112 16.7584 21.4063 17.5552 21.4048 17.7901 cv22.0679 17.7901 li22.73 17.7901 li22.7291 17.5552 22.7237 16.7584 22.731 16.2598 cv22.7388 15.7413 22.2168 15.3194 22.0684 15.2413 cv21.919 15.3194 21.3975 15.7413 21.4043 16.2598 cvcp21.2715 16.2618 mo21.2652 15.8672 21.6646 15.2422 22.0684 15.0977 cv22.4712 15.2422 22.8697 15.8672 22.8643 16.2618 cv22.856 16.8497 22.8648 17.9234 22.8648 17.9234 cv22.0679 17.9234 li21.271 17.9234 li21.271 17.9234 21.2798 16.8497 21.2715 16.2618 cvcp24.1578 17.9332 mo24.1578 15.4126 li24.2911 15.4126 li24.2911 17.9332 li24.1578 17.9332 licp34.1202 16.4927 mo34.126 16.941 34.1231 17.2881 34.1211 17.4278 cv34.4576 17.4278 li34.7945 17.4278 li34.7935 17.3716 34.7925 17.2818 34.792 17.1666 cv34.3658 17.1666 li34.3658 16.2984 li34.3658 16.2984 34.3477 16.0489 34.5879 15.8145 cv34.5396 15.7627 34.4922 15.7295 34.4576 15.7129 cv34.3497 15.7662 34.1128 15.9693 34.1202 16.4927 cvcp33.9874 16.4947 mo33.982 16.1622 34.0928 15.7012 34.4576 15.5699 cv34.8228 15.7012 34.9332 16.1622 34.9288 16.4947 cv34.9205 17.0831 34.9302 17.5601 34.9302 17.5601 cv34.4576 17.5601 li33.9859 17.5601 li33.9859 17.5601 33.9952 17.0831 33.9874 16.4947 cvcp33.7955 16.2598 mo33.8018 16.7584 33.7969 17.5552 33.796 17.7901 cv34.4576 17.7901 li35.1211 17.7901 li35.1192 17.5552 35.1148 16.7584 35.1216 16.2598 cv35.1285 15.7413 34.6075 15.3194 34.4581 15.2413 cv34.3096 15.3194 33.7876 15.7413 33.7955 16.2598 cvcp33.6617 16.2618 mo33.6563 15.8672 34.0557 15.2422 34.4581 15.0977 cv34.8624 15.2422 35.2608 15.8672 35.2544 16.2618 cv35.2461 16.8497 35.2554 17.9234 35.2554 17.9234 cv34.4576 17.9234 li33.6612 17.9234 li33.6612 17.9234 33.67 16.8497 33.6617 16.2618 cvcp36.5484 17.9332 mo36.5484 15.4126 li36.6812 15.4126 li36.6812 17.9332 li36.5484 17.9332 licp32.2627 17.9253 mo32.2627 15.4043 li32.396 15.4043 li32.396 17.9253 li32.2627 17.9253 licp32.1939 23.149 mo32.1939 19.7457 li32.3277 19.7457 li32.3277 23.149 li32.1939 23.149 licp33.9473 21.2388 mo33.9571 21.8682 33.9512 22.3462 33.9488 22.5162 cv34.4561 22.5162 li34.9644 22.5162 li34.9634 22.4449 34.962 22.3155 34.9615 22.1436 cv34.3248 22.1436 li34.3248 20.9776 li34.3248 20.9776 34.3379 20.6236 34.6636 20.3126 cv34.586 20.2334 34.5098 20.1871 34.4561 20.1651 cv34.2969 20.2325 33.9366 20.5088 33.9473 21.2388 cvcp33.8145 21.2408 mo33.8072 20.7974 33.9698 20.1885 34.4561 20.023 cv34.9434 20.1885 35.1055 20.7974 35.0992 21.2408 cv35.087 22.0303 35.1006 22.65 35.1006 22.65 cv34.4561 22.65 li33.8126 22.65 li33.8126 22.65 33.8257 22.0303 33.8145 21.2408 cvcp33.4839 20.9258 mo33.4942 21.6119 33.4864 22.7212 33.4844 23.004 cv34.4561 23.004 li35.4297 23.004 li35.4278 22.7212 35.42 21.6119 35.4302 20.9258 cv35.441 20.2046 34.6607 19.6216 34.4571 19.5308 cv34.254 19.6216 33.4732 20.2046 33.4839 20.9258 cvcp33.3506 20.9268 mo33.3428 20.3956 33.9195 19.5704 34.4571 19.3877 cv34.9957 19.5704 35.5713 20.3956 35.564 20.9268 cv35.5523 21.7178 35.564 23.1377 35.564 23.1377 cv34.4561 23.1377 li33.3501 23.1377 li33.3501 23.1377 33.3624 21.7178 33.3506 20.9268 cvcp36.5904 23.1509 mo36.5904 19.7481 li36.7232 19.7481 li36.7232 23.1509 li36.5904 23.1509 licp19.8042 23.149 mo19.8042 19.7457 li19.9371 19.7457 li19.9371 23.149 li19.8042 23.149 licp21.5567 21.2388 mo21.566 21.8682 21.5611 22.3462 21.5577 22.5162 cv22.066 22.5162 li22.5743 22.5162 li22.5728 22.4449 22.5713 22.3155 22.5704 22.1436 cv21.9336 22.1436 li21.9336 20.9776 li21.9336 20.9776 21.9473 20.6236 22.2735 20.3126 cv22.1954 20.2334 22.1192 20.1871 22.066 20.1651 cv21.9068 20.2325 21.5455 20.5088 21.5567 21.2388 cvcp21.4239 21.2408 mo21.417 20.7974 21.5787 20.1885 22.066 20.023 cv22.5533 20.1885 22.7149 20.7974 22.7085 21.2408 cv22.6968 22.0303 22.71 22.65 22.71 22.65 cv22.066 22.65 li21.4219 22.65 li21.4219 22.65 21.4356 22.0303 21.4239 21.2408 cvcp21.0933 20.9258 mo21.1031 21.6119 21.0962 22.7212 21.0933 23.004 cv22.066 23.004 li23.0396 23.004 li23.0372 22.7212 23.0298 21.6119 23.0401 20.9258 cv23.0508 20.2046 22.2701 19.6216 22.0674 19.5308 cv21.8643 19.6216 21.0821 20.2046 21.0933 20.9258 cvcp20.9605 20.9268 mo20.9522 20.3956 21.5289 19.5704 22.0674 19.3877 cv22.6045 19.5704 23.1812 20.3956 23.1729 20.9268 cv23.1612 21.7178 23.1734 23.1377 23.1734 23.1377 cv22.066 23.1377 li20.9595 23.1377 li20.9595 23.1377 20.9717 21.7178 20.9605 20.9268 cvcp24.1993 23.1509 mo24.1993 19.7481 li24.3326 19.7481 li24.3326 23.1509 li24.1993 23.1509 licp28.0118 20.5772 mo28.0118 20.0328 li28.2447 19.8233 li28.4781 20.0328 li28.4781 20.5772 li28.0118 20.5772 licp28.0059 22.3799 mo28.0059 22.3799 28.0059 22.1456 28.2437 22.1456 cv28.4815 22.1456 28.4815 22.3799 28.4815 22.3799 cv28.4815 23.316 li28.0059 23.316 li28.0059 22.3799 licp34.7125 26.335 mo34.7125 27.7437 li34.0484 27.7437 li34.3697 27.399 li34.3697 26.5918 li34.0484 26.335 li34.7125 26.335 licp22.2833 26.335 mo22.2833 27.7437 li21.6187 27.7437 li21.9405 27.399 li21.9405 26.5918 li21.6187 26.335 li22.2833 26.335 licp28.7188 31.3003 mo28.5411 31.5225 li28.3526 31.315 li28.5298 31.0904 li28.7188 31.3003 licp29.0191 30.9449 mo28.8409 31.168 li28.6519 30.959 li28.8306 30.7354 li29.0191 30.9449 licp28.4195 30.9449 mo28.2403 31.168 li28.0528 30.959 li28.2295 30.7354 li28.4195 30.9449 licp28.7188 30.5928 mo28.5411 30.8155 li28.3526 30.6036 li28.5298 30.3814 li28.7188 30.5928 licp29.0191 30.2374 mo28.8409 30.461 li28.6519 30.2496 li28.8306 30.0264 li29.0191 30.2374 licp28.4195 30.2374 mo28.2403 30.461 li28.0528 30.2496 li28.2295 30.0264 li28.4195 30.2374 licp28.7188 29.8814 mo28.5411 30.105 li28.3526 29.8956 li28.5298 29.6729 li28.7188 29.8814 licp29.0191 29.5284 mo28.8409 29.7505 li28.6519 29.5425 li28.8306 29.3179 li29.0191 29.5284 licp28.4195 29.5284 mo28.2403 29.7505 li28.0528 29.5425 li28.2295 29.3179 li28.4195 29.5284 licp29.0191 28.8199 mo28.8409 29.0435 li28.6519 28.8321 li28.8306 28.6084 li29.0191 28.8199 licp28.4195 28.8199 mo28.2403 29.0435 li28.0528 28.8321 li28.2295 28.6084 li28.4195 28.8199 licp28.7188 28.4659 mo28.5411 28.6876 li28.3526 28.4786 li28.5298 28.2554 li28.7188 28.4659 licp28.7188 29.1744 mo28.5411 29.3965 li28.3526 29.1871 li28.5298 28.9644 li28.7188 29.1744 licp28.6939 31.6114 mo28.8287 31.4434 li28.9786 31.6114 li29.1133 31.6114 li29.1133 31.4918 li28.9527 31.315 li29.1133 31.1109 li29.1133 30.7842 li28.9527 30.6036 li29.1133 30.4014 li29.1133 30.0743 li28.9527 29.8956 li29.1133 29.6944 li29.1133 29.3658 li28.9527 29.1871 li29.1133 28.9849 li29.1133 28.6573 li28.9527 28.4786 li29.0655 28.3355 li29.0435 28.2715 29.0113 28.2164 28.9722 28.17 cv28.8409 28.3331 li28.6519 28.125 li28.7437 28.0103 li28.6119 27.9605 28.462 27.962 28.3301 28.0123 cv28.4195 28.1104 li28.2403 28.3331 li28.0987 28.1763 li28.0611 28.2232 28.0293 28.2774 28.0069 28.3399 cv28.1192 28.4659 li27.9678 28.6548 li27.9678 29.0059 li28.1192 29.1744 li27.9678 29.3628 li27.9678 29.7149 li28.1192 29.8814 li27.9678 30.0713 li27.9678 30.4229 li28.1192 30.5928 li27.9678 30.7818 li27.9678 31.1324 li28.1192 31.3003 li27.9678 31.4888 li27.9678 31.6114 li28.0938 31.6114 li28.2295 31.4449 li28.379 31.6114 li28.6939 31.6114 licp28.2198 27.8541 mo27.8189 27.8819 27.4629 28.1358 27.4629 28.5904 cv27.4629 32.0835 li29.1133 32.0835 li29.1133 31.796 li27.7828 31.796 li27.7828 28.563 li27.7872 28.1958 27.9766 27.9585 28.2198 27.8541 cvcp28.2901 27.6656 mo28.7813 27.6636 29.3023 27.9629 29.2989 28.5904 cv29.2989 32.2706 li27.2774 32.2706 li27.2774 28.5904 li27.2774 27.9703 27.7994 27.667 28.2901 27.6656 cvcp34.7125 30.7754 mo34.7125 32.1856 li34.0484 32.1856 li34.3697 31.8409 li34.3697 31.0323 li34.0484 30.7754 li34.7125 30.7754 licp22.2833 30.7754 mo22.2833 32.1856 li21.6187 32.1856 li21.9405 31.8409 li21.9405 31.0323 li21.6187 30.7754 li22.2833 30.7754 licp34.7281 34.7974 mo34.7281 36.2071 li34.064 36.2071 li34.3853 35.8624 li34.3853 35.0538 li34.064 34.7974 li34.7281 34.7974 licp22.2833 34.8062 mo22.2833 36.2159 li21.6187 36.2159 li21.9405 35.8702 li21.9405 35.0626 li21.6187 34.8062 li22.2833 34.8062 licp30.6822 36.5542 mo29.5821 36.5542 li29.5826 35.1065 li29.5835 34.4717 30.6788 34.4708 30.6822 35.1065 cv30.6822 36.5542 licp30.4966 36.3687 mo30.4966 36.0958 li30.045 36.0958 li30.045 35.1045 li30.045 34.9449 30.1441 34.8541 30.2579 34.8306 cv30.046 34.774 29.7686 34.8653 29.7686 35.1065 cv29.7676 36.3687 li30.4966 36.3687 licp26.9073 36.5611 mo25.8072 36.5611 li25.8077 35.1133 li25.8082 34.4786 26.9039 34.4786 26.9078 35.1133 cv26.9073 36.5611 licp26.7217 36.3755 mo26.7217 36.1036 li26.2696 36.1036 li26.2696 35.1114 li26.2696 34.9517 26.3687 34.8604 26.482 34.837 cv26.2706 34.7808 25.9932 34.8726 25.9927 35.1143 cv25.9927 36.3755 li26.7217 36.3755 licp40.5757 48.9922 mo39.6661 48.9922 li39.6661 48.9273 li39.8057 48.9136 39.9078 48.9029 39.9078 48.7418 cv39.9078 47.4839 li39.9078 47.3126 39.7857 47.3057 39.6661 47.2989 cv39.6661 47.2334 li40.5757 47.2334 li40.5757 47.2989 li40.4527 47.3038 40.3287 47.3057 40.3287 47.4839 cv40.3287 48.7418 li40.3287 48.9092 40.4327 48.9166 40.5757 48.9273 cv40.5757 48.9922 licp39.2266 48.9922 mo38.3155 48.9922 li38.3155 48.9273 li38.4571 48.9136 38.5577 48.9029 38.5577 48.7418 cv38.5577 47.4839 li38.5577 47.3126 38.4356 47.3057 38.3155 47.2989 cv38.3155 47.2334 li39.2266 47.2334 li39.2266 47.2989 li39.1036 47.3038 38.9791 47.3057 38.9791 47.4839 cv38.9791 48.7418 li38.9791 48.9092 39.0835 48.9166 39.2266 48.9273 cv39.2266 48.9922 licp37.8375 47.2989 mo37.6006 47.3199 37.5518 47.3902 37.1407 47.9664 cv37.6138 48.7017 li37.7515 48.9166 37.793 48.9234 37.8663 48.9273 cv37.8663 48.9922 li36.9825 48.9922 li36.9825 48.9273 li37.1172 48.921 37.19 48.9136 37.19 48.8443 cv37.19 48.8174 37.1617 48.7496 37.1358 48.7095 cv36.8731 48.2881 li36.774 48.419 li36.5582 48.7095 36.5298 48.7691 36.5298 48.8174 cv36.5298 48.9092 36.6495 48.921 36.7403 48.9273 cv36.7403 48.9922 li36.0899 48.9922 li36.0899 48.9273 li36.1778 48.9136 36.2671 48.9014 36.3604 48.7818 cv36.816 48.2066 li36.3008 47.4493 li36.2457 47.3697 36.2017 47.3038 36.0933 47.2989 cv36.0933 47.2334 li36.9922 47.2334 li36.9922 47.2989 li36.8389 47.3086 36.7876 47.3086 36.7876 47.3843 cv36.7876 47.4195 36.7955 47.4341 36.8257 47.4795 cv37.0782 47.8711 li37.3746 47.46 37.3746 47.46 37.3746 47.3902 cv37.3746 47.3086 37.3028 47.3057 37.1876 47.2989 cv37.1876 47.2334 li37.8375 47.2334 li37.8375 47.2989 licp35.6739 47.2989 mo35.4376 47.3199 35.3877 47.3902 34.9766 47.9664 cv35.4507 48.7017 li35.5884 48.9166 35.6299 48.9234 35.7017 48.9273 cv35.7017 48.9922 li34.8184 48.9922 li34.8184 48.9273 li34.9537 48.921 35.0269 48.9136 35.0269 48.8443 cv35.0269 48.8174 34.9981 48.7496 34.9717 48.7095 cv34.709 48.2881 li34.6104 48.419 li34.3941 48.7095 34.3658 48.7691 34.3658 48.8174 cv34.3658 48.9092 34.4859 48.921 34.5767 48.9273 cv34.5767 48.9922 li33.9263 48.9922 li33.9263 48.9273 li34.0152 48.9136 34.1031 48.9014 34.1973 48.7818 cv34.6519 48.2066 li34.1363 47.4493 li34.0826 47.3697 34.0386 47.3038 33.9288 47.2989 cv33.9288 47.2334 li34.8292 47.2334 li34.8292 47.2989 li34.6753 47.3086 34.6226 47.3086 34.6226 47.3843 cv34.6226 47.4195 34.6309 47.4341 34.6622 47.4795 cv34.9146 47.8711 li35.2115 47.46 35.2115 47.46 35.2115 47.3902 cv35.2115 47.3086 35.1377 47.3057 35.024 47.2989 cv35.024 47.2334 li35.6739 47.2334 li35.6739 47.2989 licp33.5108 47.2989 mo33.2735 47.3199 33.2242 47.3902 32.814 47.9664 cv33.2867 48.7017 li33.4244 48.9166 33.4659 48.9234 33.5391 48.9273 cv33.5391 48.9922 li32.6548 48.9922 li32.6548 48.9273 li32.7901 48.921 32.8628 48.9136 32.8628 48.8443 cv32.8628 48.8174 32.834 48.7496 32.8082 48.7095 cv32.545 48.2881 li32.4468 48.419 li32.2315 48.7095 32.2022 48.7691 32.2022 48.8174 cv32.2022 48.9092 32.3218 48.921 32.4136 48.9273 cv32.4136 48.9922 li31.7632 48.9922 li31.7632 48.9273 li31.8516 48.9136 31.94 48.9014 32.0337 48.7818 cv32.4888 48.2066 li31.9737 47.4493 li31.919 47.3697 31.8746 47.3038 31.7657 47.2989 cv31.7657 47.2334 li32.6656 47.2334 li32.6656 47.2989 li32.5123 47.3086 32.46 47.3086 32.46 47.3843 cv32.46 47.4195 32.4683 47.4341 32.4991 47.4795 cv32.751 47.8711 li33.0479 47.46 33.0479 47.46 33.0479 47.3902 cv33.0479 47.3086 32.9747 47.3057 32.8609 47.2989 cv32.8609 47.2334 li33.5108 47.2334 li33.5108 47.2989 licp22.7974 48.6622 mo22.6075 48.878 22.4048 49.0411 22.0713 49.0411 cv21.4664 49.0411 21.1377 48.6153 21.1377 48.1285 cv21.1377 47.6001 21.5123 47.1939 22.0586 47.1939 cv22.2925 47.1939 22.4932 47.3243 22.5606 47.3243 cv22.6309 47.3243 22.6543 47.2681 22.6802 47.2032 cv22.75 47.2032 li22.75 47.8121 li22.6851 47.8121 li22.5938 47.5845 22.3755 47.2808 22.0792 47.2808 cv21.7002 47.2808 21.5982 47.6783 21.5982 48.1187 cv21.5982 48.2735 21.6138 48.524 21.7095 48.69 cv21.8194 48.878 22.025 48.9166 22.1055 48.9166 cv22.3082 48.9166 22.5035 48.8389 22.7198 48.5972 cv22.7974 48.6622 licp20.816 48.6622 mo20.6255 48.878 20.4229 49.0411 20.0899 49.0411 cv19.4839 49.0411 19.1563 48.6153 19.1563 48.1285 cv19.1563 47.6001 19.5313 47.1939 20.0767 47.1939 cv20.3111 47.1939 20.5113 47.3243 20.5792 47.3243 cv20.6495 47.3243 20.6724 47.2681 20.6988 47.2032 cv20.7686 47.2032 li20.7686 47.8121 li20.7037 47.8121 li20.6128 47.5845 20.3946 47.2808 20.0977 47.2808 cv19.7183 47.2808 19.6172 47.6783 19.6172 48.1187 cv19.6172 48.2735 19.6324 48.524 19.7286 48.69 cv19.8375 48.878 20.043 48.9166 20.1241 48.9166 cv20.3267 48.9166 20.522 48.8389 20.7374 48.5972 cv20.816 48.6622 licp16.98 48.9922 mo16.98 48.9273 li17.1441 48.9273 17.1954 48.8526 17.1954 48.7564 cv17.1954 47.4722 li17.1954 47.3135 17.0816 47.3086 16.98 47.2989 cv16.98 47.2334 li17.773 47.2334 li18.501 47.2334 18.7378 47.6856 18.7378 48.0865 cv18.7378 48.566 18.4566 48.9708 17.8023 48.9922 cv16.98 48.9922 licp17.6172 47.4449 mo17.6172 48.7496 li17.6172 48.8545 17.6407 48.9014 17.7652 48.9014 cv18.0567 48.9014 18.2857 48.7364 18.2857 48.1133 cv18.2857 47.876 18.2261 47.3243 17.7784 47.3243 cv17.6119 47.3243 17.6143 47.3873 17.6172 47.4449 cvcp16.5982 48.9922 mo15.7344 48.9922 li15.7344 48.9273 li15.8902 48.9112 15.9659 48.9029 15.9659 48.733 cv15.9659 47.4205 li15.3106 48.9922 li15.2398 48.9922 li14.5899 47.46 li14.5855 48.669 li14.5855 48.8526 14.6319 48.9136 14.8477 48.9273 cv14.8477 48.9922 li14.2393 48.9922 li14.2393 48.9273 li14.4419 48.9092 14.4751 48.8711 14.4751 48.7183 cv14.4751 47.4839 li14.4751 47.3492 14.4292 47.3126 14.2447 47.2989 cv14.2447 47.2334 li14.9024 47.2334 li15.4229 48.461 li15.9424 47.2334 li16.5982 47.2334 li16.5982 47.2989 li16.4517 47.3086 16.3687 47.3135 16.3687 47.5381 cv16.3687 48.6885 li16.3687 48.896 16.4258 48.9029 16.5982 48.9273 cv16.5982 48.9922 licp24.7789 48.6622 mo24.5884 48.878 24.3858 49.0411 24.0523 49.0411 cv23.4468 49.0411 23.1197 48.6153 23.1197 48.1285 cv23.1197 47.6001 23.4942 47.1939 24.0401 47.1939 cv24.2745 47.1939 24.4737 47.3243 24.542 47.3243 cv24.6119 47.3243 24.6353 47.2681 24.6617 47.2032 cv24.7315 47.2032 li24.7315 47.8121 li24.6666 47.8121 li24.5762 47.5845 24.3575 47.2808 24.0606 47.2808 cv23.6817 47.2808 23.5801 47.6783 23.5801 48.1187 cv23.5801 48.2735 23.5953 48.524 23.6919 48.69 cv23.8008 48.878 24.0059 48.9166 24.0875 48.9166 cv24.2896 48.9166 24.4844 48.8389 24.7007 48.5972 cv24.7789 48.6622 licp41.9258 48.9922 mo41.0147 48.9922 li41.0147 48.9273 li41.1553 48.9136 41.2569 48.9029 41.2569 48.7418 cv41.2569 47.4839 li41.2569 47.3126 41.1348 47.3057 41.0147 47.2989 cv41.0147 47.2334 li41.9258 47.2334 li41.9258 47.2989 li41.8028 47.3038 41.6783 47.3057 41.6783 47.4839 cv41.6783 48.7418 li41.6783 48.9092 41.7823 48.9166 41.9258 48.9273 cv41.9258 48.9922 licp28.8453 45.8179 mo28.8028 45.8028 28.7632 45.7803 28.7349 45.7432 cv28.6626 45.6441 28.6758 45.4942 28.5704 45.5166 cv28.3316 45.5665 28.0767 45.5538 27.8721 45.5103 cv27.7437 45.4834 27.7393 45.7305 27.5655 45.8204 cv27.5523 45.9376 27.6241 45.981 27.5679 46.1065 cv27.5313 46.1885 27.4087 46.1343 27.4454 46.0523 cv27.4839 45.9649 27.3599 45.753 27.482 45.709 cv27.6587 45.6475 27.6192 45.3194 27.9004 45.379 cv28.0894 45.4195 28.3257 45.4302 28.5425 45.3848 cv28.7813 45.3365 28.7535 45.5406 28.8428 45.6636 cv28.8785 45.711 29.0948 45.7251 28.9708 45.8716 cv28.962 45.8819 28.9585 45.8892 28.9576 45.8916 cv28.9615 45.9302 29.0699 45.9864 29.0093 46.1021 cv28.9678 46.1817 28.8492 46.1192 28.8907 46.0396 cv28.856 45.9551 28.7842 45.9185 28.8453 45.8179 cvcp28.397 46.5176 mo28.4542 46.5381 28.5064 46.5479 28.5621 46.5738 cv28.6866 46.6314 28.6495 46.7237 28.6812 46.8101 cv28.7139 46.9009 28.5792 46.9493 28.5469 46.8599 cv28.5318 46.8189 28.5308 46.7779 28.5235 46.7364 cv28.5186 46.7149 28.5137 46.709 28.5005 46.7042 cv28.4507 46.6797 28.4029 46.671 28.3497 46.6539 cv28.2598 46.6226 28.3067 46.4864 28.397 46.5176 cvcp28.1539 46.6539 mo28.1016 46.671 28.0533 46.6797 28.0025 46.7042 cv27.9761 46.7159 27.9771 46.7627 27.9737 46.7876 cv27.9708 46.8082 27.9668 46.8335 27.9571 46.8599 cv27.9249 46.9493 27.7906 46.9009 27.8228 46.8101 cv27.8545 46.7237 27.8169 46.6314 27.9419 46.5738 cv27.9976 46.5479 28.0499 46.5381 28.107 46.5176 cv28.1968 46.4864 28.2442 46.6226 28.1539 46.6539 cvcp28.2325 46.4478 mo28.1011 46.4468 li27.9825 46.4454 28.0347 46.21 28.0381 46.0562 cv27.9908 45.9898 27.8306 46.0406 27.8272 46.0665 cv27.8126 46.1612 27.6714 46.1397 27.6856 46.0455 cv27.7193 45.8277 28.1861 45.8277 28.1812 46.0406 cv28.1749 46.3047 li28.2295 46.3047 li28.2867 46.3047 li28.2798 46.0406 li28.2754 45.8277 28.7422 45.8277 28.7754 46.0455 cv28.7901 46.1397 28.6485 46.1612 28.6343 46.0665 cv28.6299 46.0406 28.4708 45.9898 28.4229 46.0562 cv28.4273 46.21 28.4786 46.4454 28.3599 46.4468 cv28.2325 46.4478 licp48.1763 33.7833 mo48.5503 32.1836 li48.6646 32.209 li48.6304 32.4615 48.607 32.6441 48.8897 32.709 cv51.1016 33.2281 li51.4029 33.2994 51.462 33.0855 51.5254 32.8785 cv51.6392 32.9053 li51.2652 34.5059 li51.1514 34.4776 li51.1924 34.2613 51.2388 34.0425 50.9288 33.9698 cv48.7168 33.4507 li48.4244 33.3838 48.3677 33.5616 48.2906 33.8091 cv48.1763 33.7833 licp50.9146 31.5518 mo51.2505 31.5035 51.8174 31.2808 51.8755 30.73 cv51.9019 30.4878 51.7886 30.2139 51.4859 30.1827 cv51.2344 30.1568 51.1221 30.2344 50.8843 30.6055 cv50.4698 31.2544 li50.3736 31.4063 50.0655 31.7295 49.5567 31.6768 cv49.1465 31.6314 48.6128 31.274 48.7051 30.4151 cv48.752 29.9722 48.9332 29.7779 48.9488 29.6329 cv48.9595 29.5347 48.878 29.5035 48.8052 29.4776 cv48.8194 29.3414 li49.9717 29.4629 li49.9581 29.5987 li49.4761 29.6426 48.9205 29.8575 48.857 30.4502 cv48.7969 31.0098 49.2574 31.0831 49.3174 31.0884 cv49.6304 31.1236 49.7652 30.9156 49.9424 30.628 cv50.125 30.3306 li50.5928 29.5728 50.9942 29.6168 51.2085 29.6397 cv51.4937 29.67 52.1124 29.8814 52.0186 30.7686 cv51.9786 31.1412 51.8008 31.3443 51.7862 31.48 cv51.7745 31.587 51.8418 31.6192 51.9283 31.6509 cv51.9136 31.7911 li50.9009 31.6832 li50.9146 31.5518 licp48.9214 25.6988 mo48.9673 25.9786 49.0069 26.108 49.3155 26.0928 cv51.5372 25.9883 li51.8492 25.7095 51.8589 25.6348 51.857 25.5733 cv51.9727 25.5674 li52.0206 26.5577 li50.0948 28.2793 li50.0967 28.2891 li51.5162 28.2212 li51.7979 28.2085 51.9498 28.1456 51.9595 27.7642 cv52.0772 27.7569 li52.1246 28.7652 li52.0079 28.7725 li51.9493 28.4356 51.8399 28.4126 51.6148 28.4239 cv48.8545 28.5533 li48.8477 28.4229 li51.2896 26.2168 li51.2896 26.2071 li49.4146 26.2945 li49.0772 26.3121 48.9922 26.4126 48.9712 26.7618 cv48.8545 26.7676 li48.8042 25.7032 li48.9214 25.6988 licp51.2056 21.7334 mo51.7842 24.3804 li50.8633 24.5801 li50.837 24.4659 li51.4654 24.2188 51.5088 23.8677 51.3741 23.2491 cv51.3184 22.9976 51.2818 22.9175 51.085 22.9605 cv50.022 23.1929 li50.1128 23.6338 50.2833 23.8438 50.8668 23.7886 cv50.8931 23.9078 li49.3433 24.2452 li49.3174 24.1265 li49.878 23.9458 49.9649 23.6817 49.8653 23.2286 cv48.7564 23.4708 li48.5542 23.5157 48.5186 23.6138 48.5831 23.9131 cv48.6817 24.3619 48.9029 24.8038 49.6587 24.941 cv49.6871 25.0684 li48.6934 25.0933 li48.106 22.4112 li48.2212 22.3863 li48.3067 22.6421 48.3506 22.7808 48.6348 22.7188 cv50.8545 22.2339 li51.1568 22.1675 51.1236 21.9722 51.0914 21.7584 cv51.2056 21.7334 licp48.5372 21.7789 mo48.0484 21.607 47.6382 21.377 47.4146 20.8179 cv47.0084 19.8038 47.5025 18.9693 48.3174 18.6421 cv49.2012 18.2881 50.1324 18.6421 50.4986 19.5586 cv50.6553 19.9493 50.5767 20.3697 50.6221 20.4839 cv50.6695 20.6016 50.7769 20.6031 50.9029 20.6031 cv50.9502 20.7208 li49.9307 21.1309 li49.8863 21.022 li50.2051 20.7173 50.5679 20.1465 50.3692 19.6504 cv50.1138 19.0137 49.3794 19.1119 48.6426 19.4053 cv48.3824 19.5113 47.9742 19.7056 47.7598 19.9776 cv47.5201 20.2867 47.5923 20.6568 47.6465 20.7916 cv47.7823 21.1319 48.0445 21.4058 48.5938 21.605 cv48.5372 21.7789 licp46.629 18.8145 mo45.8208 17.3853 li45.9229 17.3282 li46.0674 17.5376 46.1744 17.6866 46.4278 17.5445 cv48.4053 16.4249 li48.6744 16.2725 48.5738 16.0762 48.4805 15.8809 cv48.5821 15.8243 li49.3902 17.2549 li49.2886 17.3111 li49.1719 17.1246 49.0567 16.9312 48.7793 17.0875 cv46.8018 18.2042 li46.5401 18.3531 46.6202 18.5235 46.731 18.7579 cv46.629 18.8145 licp45.7281 16.9253 mo45.6348 16.9976 li45.0484 16.2334 li45.6197 14.5674 li45.5425 14.4664 li44.813 15.0289 li44.5162 15.2584 44.5679 15.3482 44.7237 15.6182 cv44.6299 15.6905 li43.6631 14.4336 li43.7559 14.3624 li43.98 14.5914 44.0484 14.6568 44.3501 14.4253 cv45.9937 13.1612 li46.3135 12.9146 46.2325 12.793 46.0845 12.5694 cv46.1773 12.4976 li47.0987 13.6954 li47.2994 13.9551 47.876 14.7686 47.2515 15.2486 cv46.794 15.6011 46.3838 15.3067 46.1661 15.1539 cv45.6812 16.7183 li45.6543 16.8218 45.6939 16.8809 45.7281 16.9253 cvcp46.6104 13.6456 mo45.6617 14.375 li46.0406 14.8604 46.2706 14.9908 46.7544 14.6197 cv47.1304 14.3282 47.1729 14.0542 46.9439 13.7559 cv46.7857 13.5508 46.7398 13.5752 46.6104 13.6456 cvcp45.5059 11.9341 mo45.2906 11.7872 45.1768 11.753 44.9673 11.9805 cv43.9532 13.0816 li43.7647 13.2867 43.4332 13.5494 43.146 13.5713 cv42.8013 13.5977 42.4415 13.3853 42.2339 13.1963 cv42.0816 13.0562 41.7759 12.7364 41.733 12.3326 cv41.7051 12.065 41.7271 11.8609 42.0704 11.4883 cv43.1324 10.3345 li43.3995 10.0459 43.3165 9.9546 43.1416 9.75635 cv43.2212 9.66993 li44.3877 10.7447 li44.3086 10.8321 li44.0713 10.6334 43.9605 10.5376 43.6807 10.8418 cv42.6192 11.9947 li42.438 12.1895 41.9996 12.6685 42.4971 13.125 cv43.1036 13.6856 43.5977 13.1631 43.8013 12.9415 cv44.7706 11.8882 li44.9644 11.6792 45.0308 11.523 44.7466 11.2354 cv44.8262 11.1495 li45.5855 11.8492 li45.5059 11.9341 licp40.3062 11.4883 mo38.9058 10.5665 li38.9708 10.4688 li39.2725 10.6343 39.3716 10.6876 39.5884 10.3589 cv40.9463 8.29151 li40.6622 8.12598 40.2452 7.88135 39.7544 8.45655 cv39.6407 8.38135 li40.17 7.60157 li42.523 9.14795 li42.0132 9.94239 li41.899 9.8667 li42.2334 9.18897 41.8428 8.90235 41.5821 8.70899 cv40.2237 10.7759 li40.0049 11.1104 40.0938 11.1788 40.3711 11.3902 cv40.3062 11.4883 licp16.3985 8.69532 mo16.147 8.46729 15.6158 8.16846 15.1524 8.47266 cv14.9483 8.60792 14.8101 8.86719 14.9776 9.12208 cv15.1172 9.33448 15.2476 9.3711 15.6866 9.31934 cv16.4498 9.22657 li16.6275 9.20606 17.0748 9.23829 17.3555 9.667 cv17.5821 10.0123 17.6426 10.6524 16.9205 11.1265 cv16.5479 11.3697 16.2842 11.3536 16.1626 11.4327 cv16.0801 11.4864 16.107 11.5704 16.1324 11.6436 cv16.0181 11.7183 li15.3824 10.7486 li15.4966 10.6744 li15.8345 11.0186 16.3531 11.3135 16.8521 10.9854 cv17.3218 10.6768 17.087 10.275 17.0538 10.2242 cv16.8809 9.96045 16.6343 9.98877 16.2994 10.0342 cv15.9546 10.0806 li15.0728 10.1993 14.8511 9.86133 14.7325 9.68165 cv14.5757 9.44141 14.3472 8.82813 15.0928 8.33887 cv15.4063 8.13282 15.6763 8.14161 15.7896 8.0669 cv15.8794 8.00635 15.8609 7.93458 15.8321 7.84913 cv15.9493 7.77002 li16.5084 8.62256 li16.3985 8.69532 licp15.6602 11.6959 mo15.7374 11.7842 li14.5992 12.793 li14.5215 12.7042 li14.7242 12.4937 14.7837 12.4351 14.6807 12.3199 cv14.5977 12.2247 14.2549 12.064 14.1065 11.9947 cv13.316 12.6944 li13.4415 13.0347 13.5123 13.2276 13.5621 13.2857 cv13.6807 13.419 13.8589 13.2798 13.9844 13.1802 cv14.0621 13.2681 li13.3487 13.9004 li13.271 13.8121 li13.4356 13.6163 13.379 13.4537 13.251 13.0962 cv12.3267 10.4791 li12.4253 10.3926 li14.8448 11.5474 li15.336 11.7833 15.4976 11.8536 15.6602 11.6959 cvcp13.2476 12.5108 mo13.9322 11.9029 li12.8213 11.3633 li13.2476 12.5108 licp13.1431 14.1885 mo12.0538 15.4615 li11.9654 15.3853 li12.1666 15.1065 12.2325 15.0152 11.9332 14.7598 cv10.0538 13.15 li9.8545 13.4122 9.55811 13.7955 10.0674 14.3545 cv9.97901 14.4585 li9.27149 13.8335 li11.1021 11.6939 li11.8257 12.3013 li11.7369 12.4043 li11.105 11.9874 10.7735 12.3394 10.5484 12.5733 cv12.4273 14.1812 li12.7305 14.441 12.8106 14.3624 13.0542 14.1133 cv13.1431 14.1885 licp11.4937 16.2076 mo10.5889 17.5796 li10.4908 17.5152 li10.6114 17.2896 10.6963 17.1265 10.4537 16.9654 cv8.55762 15.7139 li8.29932 15.5435 8.16993 15.7237 8.03956 15.8956 cv7.94141 15.8306 li8.8462 14.4605 li8.94385 14.5245 li8.83057 14.7144 8.71094 14.9043 8.97706 15.0792 cv10.8726 16.3316 li11.1231 16.4981 11.2378 16.3482 11.396 16.1426 cv11.4937 16.2076 licp8.25147 17.1685 mo7.92042 17.0938 7.31202 17.0982 7.06006 17.5918 cv6.94971 17.8096 6.95801 18.1055 7.2295 18.2437 cv7.45557 18.3584 7.58838 18.3248 7.94239 18.0635 cv8.56104 17.6045 li8.70411 17.4976 9.1084 17.3042 9.56495 17.5367 cv9.93262 17.7242 10.3023 18.25 9.91016 19.0191 cv9.70801 19.4175 9.46973 19.5328 9.40381 19.6607 cv9.35938 19.75 9.42286 19.8072 9.48194 19.8599 cv9.41993 19.981 li8.3877 19.4551 li8.44874 19.3321 li8.91407 19.4649 9.51026 19.4649 9.78077 18.9317 cv10.0362 18.4307 9.63331 18.1993 9.57862 18.1714 cv9.29883 18.0279 9.09766 18.1734 8.83008 18.3799 cv8.55372 18.5918 li7.8462 19.1324 7.48682 18.9488 7.29395 18.8516 cv7.03956 18.7212 6.53663 18.3003 6.9419 17.5054 cv7.11182 17.1714 7.35059 17.0464 7.41163 16.9244 cv7.46094 16.8282 7.40918 16.774 7.33985 16.7139 cv7.40332 16.5875 li8.31153 17.0508 li8.25147 17.1685 licp9.0503 20.2291 mo9.16114 20.2671 li8.86084 21.1817 li7.1626 21.6446 li7.12256 21.7667 li7.99659 22.0528 li8.35352 22.1705 8.39942 22.0762 8.53614 21.7955 cv8.64747 21.8306 li8.15284 23.3394 li8.04151 23.3033 li8.10499 22.9878 8.12061 22.8946 7.75928 22.7759 cv5.78907 22.1285 li5.40577 22.0025 5.35108 22.1368 5.25 22.3863 cv5.13868 22.3487 li5.60987 20.9126 li5.7129 20.6006 6.0586 19.6656 6.80713 19.9126 cv7.35645 20.0923 7.34327 20.5987 7.34082 20.8628 cv8.90528 20.3848 li9.00586 20.3477 9.03174 20.2823 9.0503 20.2291 cvcp5.84376 21.3458 mo6.98047 21.7193 li7.16797 21.1338 7.14649 20.8672 6.56592 20.6783 cv6.11622 20.5313 5.86426 20.649 5.74708 21.0064 cv5.667 21.2525 5.7129 21.2774 5.84376 21.3458 cvcp4.49854 26.0865 mo4.91358 23.4102 li5.84571 23.5557 li5.82813 23.6709 li5.15284 23.6768 4.98536 23.9864 4.88916 24.6133 cv4.84913 24.8687 4.8545 24.9546 5.05469 24.9854 cv6.1294 25.1534 li6.20362 24.7085 6.11963 24.4532 5.55518 24.294 cv5.57422 24.1734 li7.14112 24.4161 li7.12256 24.5367 li6.53467 24.5044 6.35938 24.7173 6.2876 25.1783 cv7.40967 25.3511 li7.61377 25.3829 7.68311 25.3033 7.72999 25.002 cv7.8003 24.5479 7.75342 24.0567 7.09815 23.6553 cv7.11817 23.5245 li8.0542 23.8604 li7.63428 26.5733 li7.5171 26.5557 li7.53077 26.2872 7.53907 26.1417 7.25147 26.0972 cv5.00782 25.7496 li4.70118 25.7007 4.66114 25.8941 4.61426 26.105 cv4.49854 26.0865 licp4.57227 26.5386 mo4.60352 26.7969 4.69288 26.858 4.95508 26.9639 cv7.70411 28.0479 li7.70313 28.1734 li4.88624 29.3619 li4.60401 29.482 4.58985 29.5523 4.55616 29.7535 cv4.43897 29.7535 li4.44678 28.1753 li4.56397 28.1763 li4.58155 28.4737 4.58106 28.5796 4.75928 28.5816 cv4.84815 28.5826 5.0459 28.4893 5.16358 28.4424 cv6.64991 27.8355 li5.1084 27.231 li5.00098 27.1885 4.8794 27.1377 4.78565 27.1358 cv4.60206 27.1348 4.58252 27.271 4.56739 27.5381 cv4.4502 27.5381 li4.45508 26.5386 li4.57227 26.5386 licp7.66163 29.8126 mo7.84961 31.4449 li7.73292 31.4576 li7.68067 31.209 7.64112 31.0303 7.35206 31.0635 cv5.0962 31.3238 li4.7876 31.3594 4.8042 31.5796 4.81543 31.796 cv4.69874 31.8096 li4.50977 30.1763 li4.62647 30.1631 li4.66065 30.3814 4.69141 30.6055 5.00928 30.5679 cv7.26465 30.3082 li7.56348 30.2725 7.55567 30.0845 7.54542 29.8252 cv7.66163 29.8126 licp8.46192 34.7183 mo8.36377 34.4517 8.30176 34.3316 8.00049 34.4048 cv5.83741 34.9268 li5.58448 35.2579 5.58838 35.3345 5.60303 35.3921 cv5.48829 35.42 li5.25684 34.4571 li6.82374 32.4043 li6.82081 32.3965 li5.43799 32.7286 li5.16504 32.7955 5.02735 32.8863 5.08887 33.2618 cv4.97559 33.2896 li4.73926 32.3082 li4.85303 32.2803 li4.97266 32.5987 5.08497 32.6011 5.30323 32.5479 cv7.99122 31.9014 li8.02198 32.0279 li6.03809 34.6543 li6.04004 34.6651 li7.86524 34.2251 li8.19385 34.1456 8.25684 34.0279 8.21241 33.6827 cv8.32618 33.6548 li8.57569 34.6905 li8.46192 34.7183 licp5.7461 35.8311 mo5.87842 36.0557 5.96729 36.1368 6.25391 36.0191 cv7.63819 35.4502 li7.89454 35.3433 8.30567 35.2461 8.57569 35.3477 cv8.89893 35.4678 9.13721 35.8121 9.24463 36.0723 cv9.32276 36.2632 9.46436 36.6822 9.33252 37.0665 cv9.24463 37.3218 9.13916 37.4976 8.67139 37.6905 cv7.2212 38.2847 li6.85645 38.4366 6.89405 38.5528 6.96827 38.8057 cv6.85938 38.8501 li6.25635 37.3829 li6.36475 37.3375 li6.49561 37.6192 6.55518 37.753 6.93702 37.5958 cv8.38721 37.0005 li8.63379 36.897 9.23292 36.6519 8.97608 36.0254 cv8.6626 35.2623 7.99415 35.5259 7.7168 35.6416 cv6.39307 36.1851 li6.12745 36.2945 6.00245 36.4068 6.13819 36.7876 cv6.0293 36.8311 li5.63721 35.877 li5.7461 35.8311 licp49.438 36.9629 mo49.7754 36.9981 50.3794 36.9195 50.5708 36.4004 cv50.6548 36.1714 50.6124 35.8809 50.3262 35.7759 cv50.0884 35.6876 49.961 35.7349 49.6392 36.0372 cv49.0787 36.5645 li48.9488 36.6876 48.5708 36.9292 48.0904 36.75 cv47.7032 36.6075 47.274 36.1304 47.5733 35.3194 cv47.7271 34.8995 47.9507 34.7574 48 34.6207 cv48.0352 34.5293 47.9634 34.4766 47.9 34.4341 cv47.9473 34.3057 li49.0342 34.7071 li48.9874 34.836 li48.5098 34.7593 47.9185 34.8306 47.712 35.3897 cv47.5171 35.92 47.9449 36.1021 48.0015 36.1226 cv48.2969 36.2315 48.4786 36.0645 48.7208 35.8282 cv48.9708 35.584 li49.6099 34.9644 49.9888 35.1045 50.1905 35.1792 cv50.459 35.2774 51.0079 35.6377 50.6988 36.4737 cv50.5689 36.8243 50.3477 36.98 50.2999 37.106 cv50.2627 37.2081 50.3204 37.254 50.396 37.3072 cv50.3482 37.439 li49.3921 37.087 li49.438 36.9629 licp35.1724 13.376 mo35.1724 9.90137 li35.171 11.6299 li35.1695 9.8667 li35.1695 9.73096 35.1612 9.62256 35.1182 9.53858 cv34.9673 9.23926 34.6631 8.86719 34.4527 8.58448 cv34.2408 8.86622 33.9317 9.24073 33.7823 9.53858 cv33.7388 9.62256 33.7305 9.73096 33.7305 9.8667 cv33.7305 13.376 li33.9502 13.376 li33.9502 10.1343 li33.9478 10.0547 33.9419 9.80958 33.9898 9.73584 cv34.0655 9.61963 34.3887 9.10157 34.3887 9.10157 cv34.419 9.05274 34.4698 9.05176 34.501 9.10157 cv34.501 9.10157 34.8267 9.61963 34.9029 9.73584 cv34.9507 9.80958 34.9444 10.0586 34.9424 10.1368 cv34.9424 13.376 li35.1695 13.376 li35.171 11.6299 li35.1724 13.376 licp34.0831 13.376 mo34.5596 13.376 li34.5596 9.44336 li34.4449 9.26319 li34.3487 9.41651 34.1573 9.72217 34.1016 9.8086 cv34.0787 9.86915 34.0811 10.0723 34.0831 10.1334 cv34.0831 13.376 licp33.3448 8.87794 mo33.4522 9.06544 33.5708 9.27735 33.6373 9.41456 cv33.8101 9.09278 34.1578 8.66504 34.379 8.37452 cv34.4205 8.32032 34.4854 8.32032 34.5259 8.37452 cv34.5259 8.37452 34.6861 8.58643 34.8599 8.82569 cv35.0142 9.03858 35.1866 9.28223 35.2627 9.41553 cv35.4078 9.08936 35.6426 8.73194 35.8238 8.43116 cv35.9376 8.2417 36.0987 8.61963 36.232 8.8584 cv36.232 8.22608 li32.668 8.22608 li32.668 8.85206 li32.7564 8.70606 32.8453 8.56348 32.9244 8.43116 cv33.0416 8.23682 33.2095 8.6421 33.3448 8.87794 cvcp36.4185 9.18799 mo36.4888 9.31836 36.5484 9.43262 36.5748 9.5 cv36.625 9.62354 36.6299 9.77002 36.6299 9.90137 cv36.6299 13.376 li37.4615 13.376 li37.4615 13.5606 li37.1885 13.5606 li37.1885 14.1426 li37.3995 14.1421 li37.6211 14.1421 37.3711 14.5284 37.3677 14.5372 cv37.3418 14.5958 37.3077 14.7144 37.2564 14.7837 cv37.2564 18.2305 li37.3995 18.2305 li37.5918 18.2305 37.4268 18.4908 37.4048 18.5406 cv37.3834 18.5889 37.336 18.7579 37.2701 18.855 cv37.2828 23.5201 li37.5044 23.5201 li37.6827 23.5201 37.5621 23.7232 37.4654 23.9312 cv37.3951 24.0826 37.3448 24.2164 37.2798 24.2164 cv37.2784 29.0879 li37.5044 29.0879 li37.689 29.0879 37.5245 29.3541 37.4756 29.4678 cv37.4053 29.6299 37.3492 29.7833 37.2798 29.7833 cv37.2784 33.3975 li37.4385 33.3975 li37.6548 33.3975 37.4366 33.9229 37.2784 34.0606 cv37.2784 40.19 li51.3702 40.19 li53.2115 36.6231 54.2515 32.5772 54.2515 28.294 cv54.2515 13.9263 42.629 2.30469 28.2608 2.30469 cv13.9415 2.30469 2.27002 13.9263 2.27002 28.294 cv2.27002 32.5772 3.31495 36.6231 5.16163 40.19 cv19.209 40.19 li19.209 34.0938 li19.1841 34.0938 19.1334 34.0606 19.1236 34.0381 cv18.9703 33.6915 18.7715 33.3975 18.983 33.3975 cv19.209 33.3975 li19.209 29.7852 li19.1841 29.7852 19.1334 29.7535 19.1236 29.731 cv18.9703 29.3843 18.7715 29.0899 18.983 29.0899 cv19.209 29.0899 li19.209 24.2393 li19.1841 24.2393 19.1334 24.2066 19.1236 24.1841 cv18.9703 23.837 18.7715 23.5425 18.983 23.5425 cv19.2559 23.5425 li19.2618 18.9122 li19.1553 18.8355 19.0679 18.523 19.0503 18.4834 cv19.0225 18.419 18.9122 18.233 19.0826 18.233 cv19.2422 18.233 li19.3233 18.233 li19.3169 14.8404 li19.3077 14.8404 li19.1978 14.8404 19.1216 14.5567 19.1197 14.5503 cv19.1182 14.5499 18.857 14.1446 19.0826 14.1446 cv19.3267 14.1446 li19.3379 13.5606 li19.0513 13.5606 li19.0513 13.376 li19.8834 13.376 li19.8834 9.90137 li19.8834 9.77002 19.8877 9.62354 19.9376 9.5 cv19.9795 9.39502 20.0328 9.28516 20.0918 9.17579 cv20.0918 8.04053 li20.4463 8.04053 li20.4463 7.67286 li20.2432 7.67286 li20.2432 7.48731 li20.4463 7.48731 li20.4463 7.18165 li20.4463 6.77637 20.6387 6.1167 21.0655 5.53077 cv21.3321 5.1626 21.5909 4.86036 21.9551 4.59913 cv21.9551 4.2461 li21.8643 4.20606 21.8008 4.11524 21.8008 4.00879 cv21.8008 3.90381 21.8643 3.81299 21.9551 3.77295 cv21.9551 3.54932 li22.1641 3.54932 li22.1641 3.77295 li22.2544 3.81299 22.3184 3.90381 22.3184 4.00879 cv22.3184 4.11524 22.2544 4.20606 22.1641 4.2461 cv22.1641 4.59473 li22.5298 4.85743 22.795 5.16163 23.0635 5.53077 cv23.4893 6.1167 23.6822 6.77637 23.6822 7.18165 cv23.6822 7.48731 li23.876 7.48731 li23.876 7.67286 li23.6822 7.67286 li23.6822 8.04053 li24.0274 8.04053 li24.0274 9.18799 li24.0987 9.31836 24.1578 9.43262 24.1846 9.5 cv24.2344 9.62354 24.2393 9.77002 24.2393 9.90137 cv24.2393 13.376 li25.0713 13.376 li25.0713 13.5606 li24.7979 13.5606 li24.7979 14.1426 li25.0088 14.1421 li25.2247 14.1421 24.9937 14.5005 24.9849 14.5186 cv24.959 14.5772 24.9214 14.709 24.8663 14.7837 cv24.8663 18.2305 li25.0088 18.2305 li25.2295 18.2305 24.982 18.6153 24.9771 18.6241 cv24.9542 18.6778 24.9229 18.7847 24.8775 18.855 cv24.8843 18.855 li24.8917 23.5406 li25.0455 23.5406 li25.1841 23.5406 25.1348 23.6841 25.0713 23.8194 cv25.7393 23.8194 li25.7261 23.8062 li26.3892 23.1866 27.0147 22.5049 27.5723 21.7779 cv27.5723 19.6094 li27.3262 19.6094 li27.3262 19.6094 27.5093 19.1216 27.6685 18.7872 cv27.8287 18.0279 28.0694 16.732 28.0987 15.8428 cv28.1153 15.3394 28.1504 12.6666 28.1578 12.0962 cv28.0596 12.0596 27.9893 11.9644 27.9893 11.8536 cv27.9893 11.7105 28.105 11.5953 28.2481 11.5953 cv28.3912 11.5953 28.5069 11.7105 28.5069 11.8536 cv28.5069 11.9668 28.4327 12.064 28.3301 12.0982 cv28.3375 12.6753 28.3731 15.3409 28.3887 15.8428 cv28.418 16.732 28.6587 18.0279 28.8189 18.7872 cv28.9786 19.1216 29.1617 19.6094 29.1617 19.6094 cv28.9156 19.6094 li28.9156 21.773 li28.9434 21.8091 28.9722 21.8467 29.0015 21.8843 cv29.42 22.4136 30.0225 23.1163 30.7618 23.8062 cv30.7486 23.8194 li31.4195 23.8194 li31.3389 23.6426 31.3072 23.523 31.4419 23.523 cv31.647 23.523 li31.6524 18.9122 li31.5699 18.8536 31.5162 18.6529 31.5123 18.6456 cv31.4517 18.5064 31.273 18.233 31.4732 18.233 cv31.7144 18.233 li31.7071 14.8404 li31.6983 14.8404 li31.5923 14.8404 31.524 14.5826 31.5176 14.5684 cv31.4537 14.4239 31.2715 14.1446 31.4732 14.1446 cv31.7168 14.1446 li31.7281 13.5606 li31.4419 13.5606 li31.4419 13.376 li32.274 13.376 li32.274 9.90137 li32.274 9.77002 32.2779 9.62354 32.3287 9.5 cv32.3702 9.39502 32.4239 9.28516 32.4825 9.17579 cv32.4825 8.04053 li32.8365 8.04053 li32.8365 7.67286 li32.6338 7.67286 li32.6338 7.48731 li32.8365 7.48731 li32.8365 7.18165 li32.8365 6.77637 33.0289 6.1167 33.4556 5.53077 cv33.7232 5.1626 33.9815 4.86036 34.3458 4.59913 cv34.3458 4.2461 li34.2544 4.20606 34.1919 4.11524 34.1919 4.00879 cv34.1919 3.90381 34.2544 3.81299 34.3458 3.77295 cv34.3458 3.54932 li34.5542 3.54932 li34.5542 3.77295 li34.6456 3.81299 34.7085 3.90381 34.7085 4.00879 cv34.7085 4.11524 34.6456 4.20606 34.5542 4.2461 cv34.5542 4.59473 li34.921 4.85743 35.1856 5.16065 35.4537 5.53077 cv35.8804 6.1167 36.0728 6.77637 36.0728 7.18165 cv36.0728 7.48731 li36.2662 7.48731 li36.2662 7.67286 li36.0728 7.67286 li36.0728 8.04053 li36.4185 8.04053 li36.4185 9.18799 licp33.022 8.04053 mo33.7554 8.04053 li33.7554 7.67286 li33.022 7.67286 li33.022 8.04053 licp33.9405 8.04053 mo34.9644 8.04053 li34.9644 7.67286 li33.9405 7.67286 li33.9405 8.04053 licp34.9644 7.48731 mo34.9644 7.17774 li34.9644 7.17774 34.9659 6.99415 34.9546 6.74903 cv34.9434 6.5044 34.9195 6.19825 34.8668 5.94874 cv34.794 5.60254 34.6392 5.23145 34.4527 4.88331 cv34.2657 5.23145 34.1109 5.60254 34.0381 5.94874 cv33.9336 6.44629 33.9405 7.17627 33.9405 7.17774 cv33.9405 7.48731 li34.9644 7.48731 licp35.1495 8.04053 mo35.8873 8.04053 li35.8873 7.67286 li35.1495 7.67286 li35.1495 8.04053 licp35.8873 7.48731 mo35.8873 7.18165 li35.8873 6.82227 35.7105 6.19922 35.3042 5.63965 cv35.127 5.39698 34.9253 5.14795 34.6895 4.93799 cv34.8487 5.2544 34.981 5.58985 35.0489 5.90967 cv35.1343 6.31885 35.1543 6.76075 35.1495 7.17872 cv35.1495 7.48731 li35.8873 7.48731 licp33.5455 9.90137 mo33.5455 9.7671 33.5391 9.6543 33.5044 9.56885 cv33.3785 9.25489 33.1753 8.95313 33.0035 8.66163 cv32.8306 8.95313 32.6255 9.25489 32.5005 9.56885 cv32.4654 9.6543 32.459 9.7671 32.459 9.90137 cv32.459 13.376 li32.6299 13.376 li32.6299 10.1666 li32.629 10.0938 32.6236 9.85059 32.6563 9.77881 cv32.7095 9.66407 32.9371 9.15186 32.9371 9.15186 cv32.9664 9.08594 33.0293 9.08594 33.0591 9.15186 cv33.0591 9.15186 33.2886 9.66407 33.3418 9.77881 cv33.3746 9.85157 33.3697 10.0967 33.3682 10.168 cv33.3682 13.376 li33.5455 13.376 li33.5455 9.90137 licp32.9297 13.376 mo33.2354 13.376 li33.2354 10.1656 li33.2354 10.1656 33.2369 10.0914 33.2349 10.0103 cv33.2339 9.95411 33.2354 9.89063 33.2212 9.83545 cv33.1846 9.75733 33.0708 9.50294 32.9986 9.34229 cv32.9297 9.49756 li32.9297 13.376 licp35.3584 13.376 mo36.1338 13.376 li36.1338 10.1656 li36.1338 10.1656 36.1363 10.0914 36.1338 10.0103 cv36.1329 9.95411 36.1343 9.89063 36.1197 9.83545 cv36.0665 9.71973 35.8633 9.29395 35.8633 9.29395 cv35.8252 9.21436 35.9454 9.15626 35.983 9.23633 cv35.983 9.23633 36.1871 9.66407 36.2408 9.77881 cv36.273 9.85157 36.2691 10.0967 36.2671 10.168 cv36.2671 13.376 li36.4444 13.376 li36.4444 9.90137 li36.4444 9.7671 36.4385 9.6543 36.4029 9.56885 cv36.3589 9.45899 36.3052 9.35059 36.2471 9.24366 cv36.232 9.24366 li36.232 9.21582 li36.128 9.02686 36.0098 8.84229 35.9029 8.66163 cv35.7295 8.95313 35.525 9.25489 35.399 9.56885 cv35.3643 9.6543 35.3584 9.7671 35.3584 9.90137 cv35.3584 13.376 licp20.6319 8.04053 mo21.3643 8.04053 li21.3643 7.67286 li20.6319 7.67286 li20.6319 8.04053 licp21.5503 8.04053 mo22.5743 8.04053 li22.5743 7.67286 li21.5503 7.67286 li21.5503 8.04053 licp22.5743 7.48731 mo22.5743 7.17774 li22.5743 7.17774 22.5757 6.99415 22.5645 6.74903 cv22.5533 6.5044 22.5289 6.19825 22.4771 5.94874 cv22.4034 5.60254 22.2481 5.23145 22.0616 4.88331 cv21.8755 5.23145 21.7198 5.60254 21.6475 5.94874 cv21.5435 6.44629 21.5503 7.17627 21.5503 7.17774 cv21.5503 7.48731 li22.5743 7.48731 licp22.7593 8.04053 mo23.4971 8.04053 li23.4971 7.67286 li22.7593 7.67286 li22.7593 8.04053 licp23.4971 7.48731 mo23.4971 7.18165 li23.4971 6.82227 23.3204 6.19922 22.9136 5.63965 cv22.7369 5.39698 22.5352 5.14795 22.2989 4.93799 cv22.4581 5.2544 22.5904 5.58985 22.6578 5.90967 cv22.7437 6.31885 22.7632 6.76075 22.7593 7.17872 cv22.7593 7.48731 li23.4971 7.48731 licp20.2774 8.85206 mo20.3653 8.70606 20.4551 8.56348 20.5342 8.43116 cv20.6509 8.23682 20.8184 8.6421 20.9537 8.87794 cv21.0616 9.06544 21.1797 9.27735 21.2471 9.41456 cv21.4195 9.09278 21.7676 8.66504 21.9878 8.37452 cv22.0298 8.32032 22.0948 8.32032 22.1363 8.37452 cv22.1363 8.37452 22.2955 8.58643 22.4693 8.82569 cv22.6231 9.03858 22.7959 9.28223 22.8721 9.41553 cv23.0171 9.08936 23.252 8.73194 23.4327 8.43116 cv23.5469 8.2417 23.7085 8.61963 23.8418 8.8584 cv23.8418 8.22608 li20.2774 8.22608 li20.2774 8.85206 licp22.9673 13.376 mo23.7437 13.376 li23.7437 10.1656 li23.7437 10.1656 23.7452 10.0914 23.7437 10.0103 cv23.7422 9.95411 23.7437 9.89063 23.7295 9.83545 cv23.6758 9.71973 23.4727 9.29395 23.4727 9.29395 cv23.4346 9.21436 23.5547 9.15626 23.5933 9.23633 cv23.5933 9.23633 23.7969 9.66407 23.8501 9.77881 cv23.8829 9.85157 23.878 10.0967 23.8765 10.168 cv23.8765 13.376 li24.0538 13.376 li24.0538 9.90137 li24.0538 9.7671 24.0474 9.6543 24.0127 9.56885 cv23.9683 9.45899 23.9151 9.35059 23.8565 9.24366 cv23.8418 9.24366 li23.8418 9.21582 li23.7374 9.02686 23.6187 8.84229 23.5118 8.66163 cv23.3389 8.95313 23.1338 9.25489 23.0088 9.56885 cv22.9732 9.6543 22.9673 9.7671 22.9673 9.90137 cv22.9673 13.376 licp21.3404 13.376 mo21.5596 13.376 li21.5596 10.1343 li21.5567 10.0547 21.5518 9.80958 21.5992 9.73584 cv21.6749 9.61963 21.9976 9.10157 21.9976 9.10157 cv22.0289 9.05274 22.0792 9.05176 22.1104 9.10157 cv22.1104 9.10157 22.4366 9.61963 22.5123 9.73584 cv22.5596 9.80958 22.5547 10.0586 22.5518 10.1368 cv22.5518 13.376 li22.7784 13.376 li22.7784 9.8667 li22.7784 9.73096 22.7706 9.62256 22.7281 9.53858 cv22.5767 9.23926 22.273 8.86719 22.0616 8.58448 cv21.8501 8.86622 21.5416 9.24073 21.3912 9.53858 cv21.3482 9.62256 21.3404 9.73096 21.3404 9.8667 cv21.3404 13.376 licp21.6924 13.376 mo22.169 13.376 li22.169 9.44336 li22.0542 9.26319 li21.9581 9.41651 21.7671 9.72217 21.711 9.8086 cv21.688 9.86915 21.6905 10.0723 21.6924 10.1334 cv21.6924 13.376 licp20.0679 13.376 mo20.2393 13.376 li20.2393 10.1666 li20.2378 10.0938 20.2334 9.85059 20.2657 9.77881 cv20.3194 9.66407 20.5464 9.15186 20.5464 9.15186 cv20.5752 9.08594 20.6387 9.08594 20.6685 9.15186 cv20.6685 9.15186 20.898 9.66407 20.9512 9.77881 cv20.9839 9.85157 20.9795 10.0967 20.9781 10.168 cv20.9781 13.376 li21.1548 13.376 li21.1548 9.90137 li21.1548 9.7671 21.148 9.6543 21.1133 9.56885 cv20.9888 9.25489 20.7857 8.95313 20.6133 8.66163 cv20.44 8.95313 20.2349 9.25489 20.1094 9.56885 cv20.0748 9.6543 20.0679 9.7671 20.0679 9.90137 cv20.0679 13.376 licp20.5386 13.376 mo20.8448 13.376 li20.8448 10.1656 li20.8448 10.1656 20.8458 10.0914 20.8448 10.0103 cv20.8433 9.95411 20.8448 9.89063 20.8301 9.83545 cv20.795 9.75733 20.6802 9.50294 20.6075 9.34229 cv20.5386 9.49756 li20.5386 13.376 licp19.5977 13.5606 mo19.5865 14.1446 li24.5372 14.1426 li24.5372 13.5606 li19.5977 13.5606 licp19.5772 14.8404 mo19.584 18.233 li20.3008 18.232 li20.2935 14.8404 li19.5772 14.8404 licp20.5538 14.8404 mo20.5606 18.232 li23.5821 18.2315 li23.5821 14.8384 li20.5538 14.8404 licp23.8418 14.8384 mo23.8418 18.2315 li24.606 18.2305 li24.606 14.8384 li23.8418 14.8384 licp31.9883 13.5606 mo31.9771 14.1446 li36.9283 14.1426 li36.9283 13.5606 li31.9883 13.5606 licp35.9722 18.2315 mo35.9722 14.8384 li32.9444 14.8404 li32.9512 18.232 li35.9722 18.2315 licp36.233 14.8384 mo36.233 18.2315 li36.9966 18.2305 li36.9966 14.8384 li36.233 14.8384 licp31.9683 14.8404 mo31.9747 18.233 li32.6905 18.232 li32.6841 14.8404 li31.9683 14.8404 licp31.9122 18.9292 mo31.9068 23.523 li32.6226 23.523 li32.6158 18.9292 li31.9122 18.9292 licp32.876 18.9283 mo32.8829 23.522 li36.0313 23.521 li36.0313 18.9273 li32.876 18.9283 licp36.2916 18.9273 mo36.2916 23.521 li37.0225 23.521 li37.0152 18.9273 li36.2916 18.9273 licp19.522 18.9292 mo19.5157 23.5425 li20.2325 23.5425 li20.2251 18.9292 li19.522 18.9292 licp20.4854 18.9283 mo20.4927 23.5425 li23.6407 23.5406 li23.6407 18.9273 li20.4854 18.9283 licp23.9009 18.9273 mo23.9009 23.5406 li24.6319 23.5406 li24.6246 18.9273 li23.9009 18.9273 licp28.73 19.6094 mo28.2442 19.6094 li27.7579 19.6094 li27.7579 21.5323 li27.9268 21.3028 28.0894 21.0694 28.2442 20.8326 cv28.2442 20.8326 28.4463 21.1436 28.73 21.5274 cv28.73 19.6094 licp26.0904 23.8194 mo30.397 23.8194 li29.6041 23.0557 28.8731 22.2046 28.2442 21.3023 cv27.6148 22.2046 26.8843 23.0557 26.0904 23.8194 cvcp31.6334 23.8194 mo31.6509 23.8194 li31.6509 23.8604 li31.7271 24.0333 li37.2188 24.0313 li37.3624 23.7066 li31.584 23.709 li31.6334 23.8194 licp31.5084 24.004 mo24.9834 24.004 li24.9429 24.0899 24.9039 24.17 24.8663 24.21 cv24.8663 24.3521 li31.6211 24.3521 li31.6211 24.2002 li31.6036 24.1895 31.5875 24.1753 31.5821 24.1636 cv31.5586 24.1094 31.5323 24.0557 31.5084 24.004 cvcp31.9434 24.2188 mo31.9434 26.3448 li32.1265 26.3448 li32.2994 26.3448 32.1685 26.5772 32.1016 26.7286 cv32.046 26.8531 31.9957 26.9756 31.9434 27.021 cv31.9434 29.0899 li32.5772 29.0899 li32.5772 24.2188 li31.9434 24.2188 licp32.9 24.2178 mo32.9 29.0889 li36.0005 29.0889 li36.0005 24.2168 li32.9 24.2178 licp36.3223 24.2168 mo36.3223 29.0879 li36.9566 29.0879 li36.9566 24.2164 li36.3223 24.2168 licp24.8663 25.379 mo31.6211 25.379 li31.6211 24.9991 li24.8663 24.9991 li24.8663 25.379 licp31.6211 25.5123 mo24.8663 25.5123 li24.8663 25.8687 li31.6211 25.8687 li31.6211 25.5123 licp24.8663 24.8653 mo31.6211 24.8653 li31.6211 24.4854 li24.8663 24.4854 li24.8663 24.8653 licp19.5318 24.2383 mo19.5318 29.0899 li20.1651 29.0899 li20.1651 24.2383 li19.5318 24.2383 licp20.4874 24.2383 mo20.4874 29.0889 li23.5875 29.0889 li23.5875 24.2359 li20.4874 24.2383 licp23.9102 24.2359 mo23.9102 29.0879 li24.544 29.0879 li24.544 27.0279 li24.5225 27.0162 24.501 26.9986 24.4952 26.9854 cv24.3423 26.6392 24.1436 26.3448 24.3545 26.3448 cv24.544 26.3448 li24.544 24.2359 li23.9102 24.2359 licp24.8663 26.002 mo24.8663 26.3448 li31.6211 26.3448 li31.6211 26.002 li24.8663 26.002 licp24.8663 27.0406 mo24.8663 29.0879 li25.0455 29.0879 li25.2208 29.0831 25.0904 29.296 25.0157 29.4688 cv24.9688 29.5982 24.9107 29.7022 24.8663 29.7515 cv24.8663 33.3975 li31.6211 33.3975 li31.6211 29.7681 li31.6036 29.7564 31.5875 29.7427 31.5821 29.731 cv31.4292 29.3843 31.2305 29.0899 31.4419 29.0899 cv31.6211 29.0899 li31.6211 27.0406 li24.8663 27.0406 licp36.0005 33.3975 mo36.0005 29.7833 li32.9 29.7852 li32.9 33.3975 li36.0005 33.3975 licp36.3223 29.7833 mo36.3223 33.3975 li36.9566 33.3975 li36.9566 29.7833 li36.3223 29.7833 licp31.9434 29.7852 mo31.9434 33.3975 li32.5772 33.3975 li32.5772 29.7852 li31.9434 29.7852 licp19.5318 29.7852 mo19.5318 33.3975 li20.1651 33.3975 li20.1651 29.7852 li19.5318 29.7852 licp20.4874 29.7852 mo20.4874 33.3975 li23.5875 33.3975 li23.5875 29.7833 li20.4874 29.7852 licp23.9102 29.7833 mo23.9102 33.3975 li24.544 33.3975 li24.544 29.7833 li23.9102 29.7833 licp32.5772 40.19 mo32.5772 34.0938 li31.9434 34.0938 li31.9434 40.19 li32.5772 40.19 licp32.9 34.0938 mo32.9 40.19 li36.0005 40.19 li36.0005 34.0938 li32.9 34.0938 licp36.3223 34.0938 mo36.3223 40.19 li36.9566 40.19 li36.9566 34.0938 li36.3223 34.0938 licp19.5318 34.0938 mo19.5318 40.19 li20.1651 40.19 li20.1651 34.0938 li19.5318 34.0938 licp20.4874 34.0938 mo20.4874 40.19 li23.5875 40.19 li23.5875 34.0938 li20.4874 34.0938 licp23.9102 34.0938 mo23.9102 40.19 li24.544 40.19 li24.544 34.0938 li23.9102 34.0938 licp24.8663 34.0938 mo24.8663 40.19 li31.6211 40.19 li31.6211 34.0938 li24.8663 34.0938 licp26.0503 49.001 mo26.0503 49.0118 li26.2134 49.191 26.4546 49.3497 26.6475 49.4415 cv26.7339 49.3292 26.8716 49.2784 27.024 49.2676 cv26.8594 48.9546 26.7911 48.5884 26.8941 48.2432 cv26.6358 48.1836 26.3755 48.0777 26.1641 47.9102 cv26.0015 48.1607 25.8658 48.4332 25.8658 48.6402 cv25.8658 48.7584 25.9361 48.8834 26.0411 49.001 cv26.0503 49.001 licp27.0772 48.2784 mo26.9327 48.732 27.1661 49.1553 27.2427 49.2774 cv27.4214 49.3023 27.5962 49.3668 27.71 49.4395 cv27.71 49.3316 li27.6343 49.2598 27.587 49.1587 27.587 49.046 cv27.587 48.8292 27.7618 48.6543 27.9776 48.6543 cv28.1939 48.6543 28.3692 48.8292 28.3692 49.046 cv28.3692 49.1646 28.3165 49.2706 28.2339 49.3414 cv28.2339 49.5611 li28.8672 49.5601 li28.8853 49.5127 28.9258 49.4385 29.0103 49.3853 cv29.0787 49.3423 29.1465 49.3086 29.2183 49.2872 cv29.2281 49.2715 29.2418 49.2491 29.2579 49.2208 cv29.4151 48.9405 29.4898 48.5992 29.3912 48.2833 cv29.1168 48.3262 28.8409 48.3208 28.6124 48.2559 cv28.5513 48.2398 28.4771 48.2115 28.4214 48.1675 cv28.3687 48.1929 28.3101 48.2085 28.2481 48.2085 cv28.1841 48.2085 28.1241 48.1919 28.0708 48.1656 cv27.8897 48.3096 27.4615 48.3106 27.337 48.3047 cv27.2535 48.3003 27.1661 48.293 27.0772 48.2784 cvcp27.8775 49.2549 mo27.8824 49.7339 li27.5367 49.7339 li27.5557 49.8106 27.6006 49.8853 27.6416 49.9488 cv27.8824 49.9488 li27.8824 50.2032 li28.0621 50.2032 li28.0621 49.9488 li28.7652 49.9488 li28.7593 49.938 li28.7896 49.9214 28.9351 49.8262 28.9351 49.7911 cv28.9361 49.7759 28.9371 49.7491 28.9283 49.733 cv28.0621 49.7339 li28.0621 49.4288 li28.0567 49.2442 li28.1363 49.2134 28.1919 49.1363 28.1919 49.046 cv28.1919 48.9273 28.0958 48.8321 27.9776 48.8321 cv27.8599 48.8321 27.7637 48.9273 27.7637 49.046 cv27.7637 49.1275 27.8096 49.1983 27.8775 49.2344 cv27.8775 49.2549 licp28.3355 48.0123 mo28.3428 48.0084 li28.4131 47.9732 28.462 47.9004 28.462 47.8165 cv28.462 47.6978 28.3658 47.6021 28.2481 47.6021 cv28.1299 47.6021 28.0337 47.6978 28.0337 47.8165 cv28.0337 47.9341 28.1299 48.0303 28.2481 48.0303 cv28.2789 48.0303 28.3086 48.024 28.3355 48.0123 cvcp28.565 48.0455 mo28.7032 48.1177 29.065 48.1231 29.1421 48.1187 cv29.503 48.1026 29.9219 47.9957 30.2159 47.7584 cv30.0674 47.5479 29.9078 47.3545 29.7925 47.2261 cv29.4268 47.1578 li29.3267 47.3233 29.025 47.6255 28.6246 47.7085 cv28.6343 47.7432 28.6387 47.7789 28.6387 47.8165 cv28.6387 47.9014 28.6119 47.981 28.565 48.0455 cvcp29.2276 47.1202 mo28.8501 47.0499 li28.481 47.3047 28.0074 47.2911 27.6475 47.0474 cv27.2354 47.1241 li27.3516 47.2701 27.6246 47.5098 27.9683 47.542 cv28.0396 47.4688 28.1387 47.4253 28.2481 47.4253 cv28.355 47.4253 28.4522 47.4678 28.5235 47.5381 cv28.855 47.4947 29.1163 47.2613 29.2276 47.1202 cvcp29.0181 46.8926 mo29.8873 47.0552 li29.8873 47.0552 30.129 47.3165 30.3501 47.6275 cv30.378 47.6666 30.4068 47.7081 30.4351 47.7505 cv30.4327 45.2295 li30.4498 44.2452 29.9097 43.2852 28.7779 43.2852 cv28.6939 43.2852 li28.6705 43.0489 28.5821 42.6719 28.2442 42.6719 cv27.9136 42.6719 27.8199 43.0284 27.7935 43.2852 cv27.7095 43.2852 li26.5777 43.2852 26.0381 44.2452 26.0547 45.2295 cv26.0528 47.7408 li26.233 47.4708 26.4429 47.2193 26.5953 47.0552 cv27.4683 46.8921 li27.3765 46.8135 li27.3047 46.754 27.3404 46.648 27.3697 46.5782 cv27.3736 46.5684 li27.1836 46.5899 27.0279 46.5005 27.0923 46.2789 cv27.1114 46.2447 27.129 46.2027 27.1026 46.169 cv26.8672 46.0025 26.899 45.7706 27.1192 45.6529 cv27.2012 45.6128 27.1788 45.5528 27.1446 45.4932 cv27.1382 45.3682 27.1866 45.2427 27.251 45.1368 cv26.9483 43.732 li26.9483 43.732 27.0367 43.689 27.0777 43.6749 cv27.2759 43.608 27.4991 43.608 27.6402 43.7969 cv27.8086 44.2168 27.5533 44.2964 27.6294 44.4986 cv27.7222 44.6587 28.0176 44.7095 28 44.4585 cv28.0279 44.3638 27.8868 44.2666 27.8287 44.2022 cv28.2471 43.6758 li28.6612 44.2022 li28.6041 44.2666 28.4625 44.3638 28.4903 44.4585 cv28.4727 44.7095 28.7681 44.6587 28.8604 44.4986 cv28.9376 44.2964 28.6817 44.2178 28.8506 43.7969 cv29.0303 43.5542 29.3184 43.6241 29.542 43.732 cv29.2149 45.2339 li29.2422 45.2901 29.274 45.3711 29.2745 45.4468 cv29.2745 45.4683 li29.2745 45.4683 29.2608 45.4952 29.2569 45.5049 cv29.2383 45.5616 29.2476 45.6021 29.3086 45.6294 cv29.3086 45.6294 29.336 45.6412 29.3672 45.6646 cv29.5562 45.7989 29.5503 45.9898 29.3536 46.1426 cv29.3296 46.1778 29.3511 46.2208 29.3711 46.2525 cv29.3711 46.2525 29.3824 46.2833 29.3858 46.3135 cv29.4092 46.4961 29.2706 46.5738 29.105 46.5508 cv29.1114 46.5621 li29.1441 46.6304 29.1856 46.7334 29.1192 46.7974 cv29.0181 46.8926 licp25.8668 53.7598 mo25.8682 50.2793 li25.6285 50.2759 25.4361 50.0806 25.4361 49.8399 cv25.4361 49.6011 25.626 49.4068 25.8638 49.4004 cv25.8648 49.0796 li25.7544 48.9449 25.6807 48.7955 25.6807 48.6402 cv25.6807 48.4668 25.7554 48.2598 25.8668 48.0499 cv25.8697 45.2305 li25.8526 44.2129 26.4083 43.1451 27.6309 43.1016 cv27.6363 43.0757 li27.7046 42.7769 27.8897 42.4864 28.2442 42.4864 cv28.5977 42.4864 28.7837 42.7769 28.8516 43.0757 cv28.857 43.1016 li30.0796 43.1451 30.6348 44.2129 30.6187 45.2305 cv30.6207 48.0596 li30.7261 48.2588 30.8023 48.4629 30.8023 48.6402 cv30.8023 48.7945 30.7291 48.9419 30.6207 49.0762 cv30.6207 49.5582 li31.3868 49.5562 32.1934 49.5259 32.4932 49.8272 cv32.3428 49.9419 32.1636 50.0884 31.1539 50.1207 cv30.6207 50.1207 li30.6221 53.753 li30.7198 53.8194 30.9175 53.9522 31.1441 54.126 cv38.5743 53.3047 45.0557 49.3492 49.2471 43.6202 cv49.0103 43.2032 48.5909 42.8921 47.8121 42.8921 cv46.19 42.8921 46.0708 44.3648 46.0538 45.3355 cv44.9356 45.3355 li44.9161 44.2022 44.7896 42.8921 43.1802 42.8921 cv41.5582 42.8921 41.438 44.3614 41.4205 45.3321 cv40.3042 45.3355 li40.2847 44.2022 40.1587 42.8921 38.5484 42.8921 cv36.9268 42.8921 36.8067 44.3614 36.7891 45.3321 cv35.6353 45.3355 li35.6153 44.2012 35.4883 42.8921 33.8794 42.8921 cv32.2569 42.8921 32.1412 44.3638 32.1241 45.3345 cv30.9668 45.3345 li30.9668 45.2305 li30.9668 43.9742 30.2002 42.7627 29.1138 42.7627 cv29.0313 42.7627 li29.0313 42.7627 29.0054 42.6485 28.9854 42.5997 cv28.8589 42.2901 28.585 42.1334 28.2442 42.1334 cv27.813 42.1334 27.5557 42.3838 27.4527 42.7627 cv27.3736 42.7627 li26.2876 42.7627 25.521 43.9742 25.521 45.2305 cv25.521 45.3345 li24.3653 45.3345 li24.3487 44.3638 24.2305 42.8921 22.6089 42.8921 cv20.9996 42.8921 20.8721 44.2012 20.8526 45.3355 cv19.6963 45.3345 li19.6792 44.3638 19.5611 42.8921 17.939 42.8921 cv16.3292 42.8921 16.2032 44.2022 16.1836 45.3355 cv15.065 45.3345 li15.0479 44.3638 14.9292 42.8921 13.3072 42.8921 cv11.6978 42.8921 11.5723 44.2022 11.5523 45.3355 cv10.4346 45.3345 li10.418 44.3638 10.2984 42.8921 8.67579 42.8921 cv7.91944 42.8921 7.50294 43.1861 7.2627 43.584 cv11.4566 49.3248 17.9429 53.294 25.357 54.1231 cv25.5796 53.9532 25.7725 53.8233 25.8668 53.7598 cvcp26.0533 50.2413 mo26.0528 53.7071 li26.189 53.7071 li26.1841 53.4424 26.1705 52.6338 26.1934 52.0635 cv26.2569 51.5655 26.1382 50.6436 26.5406 50.2706 cv26.6226 50.1949 26.7095 50.1465 26.7989 50.1207 cv26.2139 50.1207 li26.1705 50.1724 26.1158 50.2139 26.0533 50.2413 cvcp26.0494 49.4366 mo26.1138 49.4649 26.1705 49.5074 26.2144 49.5611 cv26.4747 49.5611 li26.3433 49.4898 26.188 49.3897 26.0499 49.2696 cv26.0494 49.4366 licp26.1084 49.9488 mo26.2056 49.9488 li26.6524 49.9488 li26.6143 49.8838 26.5899 49.8086 26.5816 49.7339 cv26.2095 49.7339 li26.2022 49.7359 li26.1148 49.7359 li26.0752 49.6436 25.9825 49.5787 25.875 49.5787 cv25.7305 49.5787 25.6138 49.6963 25.6138 49.8399 cv25.6138 49.9844 25.7305 50.1011 25.875 50.1011 cv25.9756 50.1011 26.064 50.045 26.1084 49.9615 cv26.1084 49.9488 licp49.3799 43.4366 mo49.6539 43.0552 49.9166 42.668 50.1695 42.2725 cv29.0333 42.2725 li29.0992 42.3545 29.1529 42.4483 29.1915 42.5562 cv30.375 42.6094 31.1329 43.8843 31.1734 45.126 cv31.546 45.126 li31.8726 45.126 li31.9205 45.126 li31.9439 44.1802 32.1041 42.6836 33.8794 42.6836 cv35.6539 42.6836 35.8165 44.1802 35.8399 45.126 cv36.2149 45.126 li36.542 45.126 li36.5904 45.126 li36.6133 44.1802 36.7735 42.6836 38.5484 42.6836 cv40.3238 42.6836 40.4844 44.1802 40.5088 45.126 cv40.8648 45.126 li41.1792 45.126 li41.2212 45.126 li41.2457 44.1802 41.4048 42.6836 43.1802 42.6836 cv44.9551 42.6836 45.1158 44.1802 45.1407 45.126 cv45.4957 45.126 li45.8111 45.126 li45.8521 45.126 li45.876 44.1802 46.0372 42.6836 47.8121 42.6836 cv48.6158 42.6836 49.0977 42.9957 49.3799 43.4366 cvcp50.2872 42.087 mo50.3814 41.9376 50.4742 41.7857 50.565 41.6343 cv5.96778 41.6343 li6.05909 41.7857 6.15235 41.9376 6.2461 42.087 cv27.6739 42.087 li27.834 41.982 28.0279 41.9249 28.2442 41.9249 cv28.4639 41.9249 28.6641 41.98 28.8272 42.087 cv50.2872 42.087 licp50.6753 41.4488 mo50.7608 41.3028 50.8453 41.1573 50.9278 41.0103 cv5.6045 41.0103 li5.68702 41.1573 5.77149 41.3028 5.85743 41.4488 cv50.6753 41.4488 licp51.0308 40.8248 mo51.1133 40.6758 51.1939 40.5264 51.2735 40.3755 cv5.25879 40.3755 li5.3379 40.5264 5.41846 40.6758 5.50049 40.8248 cv51.0308 40.8248 licp6.36426 42.2725 mo6.61036 42.6558 6.86573 43.0323 7.13086 43.4019 cv7.41651 42.9795 7.89258 42.6836 8.67579 42.6836 cv10.4512 42.6836 10.6124 44.1802 10.6358 45.126 cv10.6773 45.126 li10.9922 45.126 li11.3477 45.126 li11.3716 44.1802 11.5323 42.6836 13.3072 42.6836 cv15.0831 42.6836 15.2437 44.1802 15.2676 45.126 cv15.3086 45.126 li15.6236 45.126 li15.9791 45.126 li16.003 44.1802 16.1636 42.6836 17.939 42.6836 cv19.7144 42.6836 19.8755 44.1802 19.899 45.126 cv19.9458 45.126 li20.273 45.126 li20.6475 45.126 li20.6714 44.1802 20.8335 42.6836 22.6089 42.6836 cv24.3838 42.6836 24.545 44.1802 24.5684 45.126 cv24.6153 45.126 li24.9419 45.126 li25.314 45.126 li25.3545 43.8834 26.1138 42.6075 27.2984 42.5562 cv27.3409 42.4493 27.3975 42.3545 27.4664 42.2725 cv6.36426 42.2725 licp27.3863 45.2481 mo27.3643 45.2876 27.3199 45.378 27.316 45.4468 cv27.3228 45.4639 li27.379 45.5997 27.3399 45.7364 27.1973 45.8062 cv27.1529 45.8321 27.0342 45.9131 27.2115 46.0347 cv27.2115 46.0347 27.2261 46.0469 27.2398 46.065 cv27.3023 46.1465 27.3008 46.2525 27.2535 46.3428 cv27.2525 46.3536 li27.2476 46.4234 27.3169 46.4063 27.3687 46.3965 cv27.377 46.3912 li27.4693 46.3458 27.587 46.3697 27.5875 46.5035 cv27.5875 46.5264 li27.5875 46.5264 27.5494 46.5923 27.5284 46.6441 cv27.5196 46.6656 27.5127 46.6851 27.5093 46.6993 cv27.7227 46.8838 li27.8838 46.9937 28.3331 47.231 28.7798 46.8877 cv28.9786 46.6924 li28.959 46.6324 28.9253 46.5762 28.8912 46.5235 cv28.8829 46.3804 28.9751 46.3262 29.0928 46.377 cv29.1026 46.3804 li29.1529 46.3882 29.2237 46.4043 29.2154 46.335 cv29.2129 46.3243 li29.1568 46.2291 29.1514 46.0923 29.2388 46.0147 cv29.4112 45.8838 29.2803 45.8062 29.2354 45.7847 cv29.0914 45.7198 29.0469 45.586 29.0943 45.4488 cv29.1011 45.4317 li29.0938 45.3692 29.0528 45.2901 29.0264 45.2481 cv28.2442 45.2481 li27.3863 45.2481 licp27.0352 47.1612 mo26.6905 47.2261 li26.6299 47.293 26.4468 47.503 26.2686 47.7559 cv26.6514 48.0606 27.3609 48.2085 27.8248 48.0777 cv27.8462 48.0713 27.8912 48.0582 27.9258 48.0391 cv27.8819 47.9761 27.8565 47.8995 27.8565 47.8165 cv27.8565 47.7818 27.8604 47.7476 27.8697 47.7159 cv27.4551 47.6426 27.1407 47.3321 27.0352 47.1612 cvcp29.5738 48.2471 mo29.6656 48.5718 29.6109 48.9566 29.4512 49.2598 cv29.5962 49.2686 29.6807 49.2911 29.7715 49.3472 cv29.8028 49.3668 29.8414 49.3916 29.8785 49.42 cv30.0645 49.3257 30.2847 49.1749 30.4356 49.0084 cv30.4356 48.9922 li30.4493 48.9922 li30.5499 48.878 30.6163 48.7554 30.6163 48.6402 cv30.6163 48.4385 30.4854 48.1705 30.3194 47.9117 cv30.1216 48.0655 29.8541 48.1812 29.5738 48.2471 cvcp30.0113 49.5591 mo30.4356 49.5582 li30.4356 49.2676 li30.2984 49.3873 30.1446 49.4869 30.0123 49.5591 cv29.9888 49.5191 29.9546 49.4834 29.917 49.4502 cv29.9546 49.4834 29.9888 49.5201 30.0113 49.5591 cvcp29.0484 49.5904 mo29.1016 49.6407 29.1236 49.7193 29.1177 49.7964 cv29.1158 49.8506 29.086 49.9024 29.0445 49.9488 cv29.6822 49.9488 li29.6958 49.9458 29.712 49.9419 29.7261 49.9371 cv29.7105 49.9424 29.7046 49.9449 29.7046 49.9458 cv29.7051 49.9468 29.8604 49.8951 29.8687 49.7979 cv29.8755 49.7125 29.878 49.629 29.7212 49.525 cv29.6045 49.4463 29.4747 49.4376 29.4229 49.4395 cv29.2881 49.4454 29.1758 49.4551 29.0484 49.5904 cvcp29.9844 49.9488 mo31.1534 49.9488 li31.4649 49.939 32.0469 49.8809 32.1197 49.8272 cv31.8736 49.7232 31.2168 49.7281 31.1534 49.7291 cv30.0489 49.731 li30.0542 49.7813 30.0523 49.8145 30.0318 49.8594 cv30.0171 49.8936 29.9991 49.9244 29.9844 49.9488 cvcp27.5137 49.5367 mo27.271 49.4288 26.8736 49.4078 26.7784 49.5787 cv26.7095 49.7271 26.8292 49.9419 26.9424 49.9419 cv26.9424 49.9488 li27.4278 49.9488 li27.3829 49.8692 27.3423 49.7418 27.3565 49.6519 cv27.3692 49.5777 27.4439 49.5484 27.5137 49.5367 cvcp29.6187 53.7071 mo29.6763 53.7071 li29.6929 53.7071 li30.4366 53.7071 li30.4356 50.1207 li29.6841 50.1207 li30.0298 50.2618 30.1416 50.7491 30.2032 51.1592 cv30.3116 51.8877 30.3082 52.6475 30.3311 53.3838 cv30.3873 53.6563 29.9732 53.5528 29.8589 53.5147 cv29.7139 53.4463 29.4927 53.4014 29.3448 53.4268 cv29.3072 53.4327 29.2144 53.4581 29.2779 53.5752 cv29.357 53.667 29.4966 53.7032 29.6187 53.7071 cvcp27.1802 50.1207 mo27.2388 50.1343 27.2964 50.1529 27.3536 50.1744 cv27.7364 50.3179 28.1163 51.462 28.3052 52.0674 cv28.4092 51.7061 28.5084 51.3233 28.6177 50.9971 cv28.7535 50.5958 28.9219 50.2168 29.1841 50.1314 cv29.2173 50.1207 li28.2339 50.1207 li28.2339 50.375 li27.71 50.375 li27.71 50.1207 li27.1802 50.1207 licp26.3731 53.6065 mo26.9542 53.3838 26.1949 52.6016 26.7212 52.375 cv27.085 52.2022 27.2955 52.6182 27.4668 52.8487 cv27.6236 53.0596 27.7544 53.1924 28.0738 52.7784 cv28.1182 52.6475 28.1631 52.5147 28.209 52.3838 cv27.9219 51.4737 27.5782 50.4561 27.2881 50.3482 cv26.23 49.9522 26.4478 51.5147 26.378 52.0792 cv26.358 52.587 26.3668 53.2823 26.3731 53.6065 cvcp27.9434 53.168 mo27.3755 53.5401 27.1768 52.3594 26.796 52.545 cv26.5186 52.6631 27.0606 53.3858 26.586 53.7071 cv27.7627 53.7071 li27.8233 53.5284 27.8834 53.3477 27.9434 53.168 cvcp28.2608 2.06739 mo42.7598 2.06739 54.4883 13.7945 54.4883 28.294 cv54.4883 42.7437 42.7603 54.5206 28.2608 54.5206 cv13.8116 54.5206 2.0337 42.7437 2.0337 28.294 cv2.0337 13.7945 13.8116 2.06739 28.2608 2.06739 cvcp28.4214 53.7071 mo29.1465 53.7071 li29.1377 53.6973 29.1299 53.6866 29.1226 53.6758 cv29.0044 53.4688 29.1016 53.2784 29.3135 53.2432 cv29.5084 53.21 29.7457 53.2608 29.9263 53.3409 cv29.6817 53.0264 29.4766 52.4805 29.2808 52.4874 cv28.8702 52.4971 29.0425 53.3487 28.4214 53.7071 cvcp29.6778 53.8926 mo29.6324 53.8926 li25.9996 53.8926 li25.9366 53.9366 25.7994 54.0284 25.6285 54.1514 cv26.4947 54.2393 27.3731 54.2842 28.2608 54.2842 cv29.1426 54.2842 30.0142 54.2403 30.8726 54.1553 cv30.7056 54.0323 30.5684 53.9415 30.4986 53.8926 cv29.6778 53.8926 licp25.9517 53.7999 mo25.9605 53.8135 li25.9605 53.7999 li25.9517 53.7999 licp30.1436 53.295 mo30.125 52.5772 30.1075 50.7471 29.7574 50.3965 cv29.6128 50.252 29.4341 50.2447 29.2418 50.3072 cv28.8677 50.4292 28.5059 52.0616 28.3941 52.418 cv28.2598 52.7999 28.0811 53.3448 27.9698 53.6739 cv28.9405 53.585 28.5972 52.3184 29.2759 52.3018 cv29.5464 52.294 29.7666 52.7061 29.8609 52.9131 cv29.919 53.0401 30.0503 53.2002 30.1436 53.295 cvcp28.064 44.1924 mo28.146 44.271 28.209 44.3521 28.1792 44.4781 cv28.1841 44.9112 27.6187 44.8882 27.4678 44.5723 cv27.3492 44.271 27.6089 44.2105 27.4839 43.8853 cv27.3975 43.7818 27.2418 43.8096 27.1529 43.8379 cv27.4214 45.0699 li28.2442 45.0699 li29.0689 45.0699 li29.3375 43.8379 li29.2491 43.8096 29.0928 43.7818 29.0059 43.8853 cv28.8814 44.21 29.1416 44.271 29.023 44.5723 cv29.023 44.5723 29.0132 44.5918 28.9961 44.6163 cv28.7994 44.9 28.3062 44.8809 28.3116 44.4781 cv28.2823 44.355 28.3433 44.272 28.4234 44.1944 cv28.2457 43.962 li28.064 44.1924 licp19.2686 33.9083 mo37.1529 33.9083 li37.296 33.5826 li19.1255 33.5826 li19.2686 33.9083 licp19.2686 29.5997 mo24.7603 29.5982 li24.9034 29.2735 li19.1255 29.2754 li19.2686 29.5997 licp31.7271 29.5997 mo37.2188 29.5982 li37.3624 29.2735 li31.584 29.2754 li31.7271 29.5997 licp24.6407 26.855 mo31.8414 26.855 li31.9844 26.5303 li24.4976 26.5303 li24.6407 26.855 licp19.2686 24.0523 mo24.7603 24.0508 li24.9034 23.7261 li19.1255 23.7281 li19.2686 24.0523 licp19.2242 18.419 mo19.3687 18.7437 li24.7232 18.7403 li24.8077 18.5494 li24.8663 18.4166 li24.7999 18.4166 li19.2422 18.419 li19.2242 18.419 licp31.6822 18.5708 mo31.7584 18.7437 li37.1138 18.7403 li37.2349 18.4654 li37.2564 18.4166 li37.1763 18.4166 li31.7696 18.419 li31.6153 18.419 li31.6822 18.5708 licp31.6876 14.4932 mo31.7584 14.6548 li37.1138 14.6529 li37.1973 14.4625 li37.2564 14.3282 li37.1094 14.3282 li31.751 14.3301 li31.6153 14.3301 li31.6876 14.4932 licp19.2891 14.4756 mo19.3687 14.6548 li24.7232 14.6529 li24.815 14.4434 li24.8663 14.3282 li24.771 14.3282 li19.2242 14.3301 li19.2891 14.4756 licp28.2608 0.83252 mo13.1446 0.83252 0.799317 13.1304 0.799317 28.294 cv0.799317 43.4083 13.1451 55.7549 28.2608 55.7549 cv43.4253 55.7549 55.7227 43.4092 55.7227 28.294 cv55.7227 13.1304 43.4258 0.83252 28.2608 0.83252 cvcp28.2046 0 mo43.7798 0 56.4092 12.6294 56.4092 28.2046 cv56.4092 43.7291 43.7798 56.4092 28.2046 56.4092 cv12.6792 56.4092 0 43.73 0 28.2046 cv0 12.6294 12.6792 0 28.2046 0 cvf%ADOBeginSubsetFont: Frutiger-LightCn Initial%ADOt1write: (1.0.21)13 dict dup begin/FontType 1 def/FontName /Frutiger-LightCn def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1991 Adobe Systems Incorporated.  All Rights Reserved.Frutiger is a trademark of Linotype-Hell AG and/or its subsidiaries.) def/Weight (Light) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 68 /D putdup 73 /I putdup 97 /a putdup 99 /c putdup 101 /e putdup 102 /f putdup 105 /i putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdef/UniqueID 1055587 def/FontBBox {-100 -250 1000 913} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-7 0 698 705 510 517 750 762] def/OtherBlues [278 282 392 396 -222 -216] def/BlueScale 0.0479583 def/StdHW [54] def/StdVW [58] def/StemSnapH [54] def/StemSnapV [58] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings16 dict dup begin/space <1C60D8A8C9B87A8F8B> |-/D <1C60D8A8C9B7EF3207C727ADD6BDCC53CC6197C91923AABFD8273923EB31B3D911A7C04D136BBCF2CD956CC0F397FFEEA63BCAD25B9C81E7345C1FB8D1F743B42ABF2D5FE597E2D7> |-/I <1C60D8A8C9B88C085E2C5294DABA7F4C8EBD8CA4C8BA1FAFE7F00EDF1F> |-/a <1C60D8A8C9B77FE28D7D7243B4DC0064135F8F9C3506ADAF46B59A891C757C4C022FFE42D61013FE8B816D2FEB9337805BD3D39FDACC0F28B39D1C1CE6C749B44425F86B5214BEE1E8EAB7E9C86FFE535FD846726F9DC7ED3F3C94EC0FA083831B415F22C07349503DC2D2F2D6625C7796B4E552D5117C9AC25F3E95C0A09B965E05440B2C3C2F1B5DE41BE8E1F49E005746D352D8D4EFA1798CE33B0A478F> |-/c <1C60D8A8C9B7299AF8E00F7141DB7AB67C3A9F6E93A3D1525443D35D70EA77FAB37B5DE9003FFBD88BE5509C9FB8F5FBC982B67FDB9D002DC7FD8D6405C1BC5269702B1CED26CB28D52B5DD3D8B156DE31495BD2D58D4F0BC3C7520D8AFE44> |-/e <1C60D8A8C9B71131937BE3D3241238E93D6E0D9F317321BCD63FFBEEFB6175DC68A86C73B1A2EDF4FCABD96A4594FA4F7FA7DDFD88E0623456011EF0E8A9E0E4DB18980E5FDD5D0CF172D1E8D2C8207E2BD5006530D339AFFB4553C1> |-/f <1C60D8A8C9B869C17C9A982F6D4F5AFCAD6D3B31318DC3729E440F7AD3D66970C83B6729C47C0F78678871BCDB56E7CC46A90C013B8A6B4BC2FF18D014EB121F11DBB85953CA7503D66971089E541311A8B783F4B2425E29FCCE3F7DBE83D056ED9B41472166E291E20EE0> |-/i <1C60D8A8C9B89E848964BCE720D28FA5D984EA6A485D589E4F755D3445C1A87F122CB4D91FD78B234BA79685EE38B8064876C09E0CD0D1> |-/m <1C60D8A8C9B6232B20DA2F07C5F6B4A56D2A9DFB40CB73078B5FD4B98F9438CD8AB06454F562DC74865FABE9154C881CE8FB6ED1F72EEE4EA029B71F1E8E66056E40D3058AC916CE56203400FC8CC0C4DBD61DB76D102128D5D271B1B4EBAF071D93A2560EBDB503D20082CC21D266C09457E270795C5D153C30551AB578334D1C8F243851F978> |-/n <1C60D8A8C9B74CDDA17C31F9DCDAF341FAB2A1BFE7FF93C9D9C0968BA298C72CBFB7E6A7A6B6948E8AB21E7F121127D7CE2BE5182293C22643D963F3A6A448D9F65DF98E5D98F7F90F42B39DBB86F7AE9769EECC3218DEE2F851F8F4472278D863> |-/o <1C60D8A8C9B74B0CF9AB1D57749BE8C7DB9D832F9C36848B8E01A002489A2776F89259CE2281A941CB73E0CFC15BDD98710210D2D55A673AD29155749A07B6CFA817B631179E368B54075445FE5DD1858FDE1EC363BD5DADC6A2DD> |-/p <1C60D8A8C9B74CDDA537FA8078C529A736A2BABC30F8D0A73D3303166E209FB46FBDD891BEF480F5F94C60A18133961A15B25F2BCB9D4F43446198EA5D4790B5F56404732FB443294E83313B5463A6350EE0C6729992A7D30357C18A14148F1D84B146D6B3EFBFD53B46183EEBFD5FF86094B4E060682AA7EFFF9764A6F0A2FC226D4D046738DE2EF7AFBDE3CBFE9121483CF0B590182B> |-/r <1C60D8A8C9B854D0CC3729F5F99586643FDC7AF6B09382B00B9155544788302595EEE4692A747426E3CC790CBB0D17736582B605E91909F94DCD6C650B9D14F1C540ED4EBE04E9> |-/s <1C60D8A8C9B80A3FC366865871753EF76F7AEFF7996270C7981C63CC023E12C4992779E99BF232FD524FA9E914EA314DC4CE1492B40C3BF68E691D7B84D0ABB5772AFEF15E90C3D67412047495B4055308D00225A35275F12BFC5E70DC5551BAC6A6C7CC2F4C8B446A354D12> |-/t <1C60D8A8C9B854D0EAE65CA4A49BA42FDE3469FEFFED9D526ADA693CC173881BACBD12C76F763F1A6D07875B79753CC494D6A7CDB07F3496F838A12A8EC35FC7AD256148956C084C35> |-/.notdef <1C60D8A8C9B87A8F8B> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont/AMLNLA+Frutiger-LightCn /Frutiger-LightCn findfont def/AMLNLA+Frutiger-LightCn*1 [32{/.notdef}repeat /space 35{/.notdef}repeat /D 4{/.notdef}repeat /I 23{/.notdef}repeat /a /.notdef /c /.notdef /e /f 2{/.notdef}repeat /i 3{/.notdef}repeat /m /n /o /p /.notdef /r /s /t 139{/.notdef}repeat] AMLNLA+Frutiger-LightCn nfntAMLNLA+Frutiger-LightCn*1  [14 0 -0 -14 0 0 ]mfnt sfnt64.1606 48.0698 mov0.000213623 0 114 (Depart) wsh98.3901 48.0698 mov0.000396729 0 111 (ment of) wsh137.813 48.0698 mov0.000244141 0 102 ( Info) wsh160.885 48.0698 mov0.000244141 0 109 (rmat) wsh184.488 48.0698 mov0.000274658 0 99 (ics) wsh%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGState/AMLNLA+Frutiger-LightCn*1 ufntAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 11.0.0%%For: (Patrick Knab) (University of Zurich \(ifi\))%%Title: (logo_inf copy.eps)%%CreationDate: 11.2.2005 15:58 Uhr%AI9_DataStream%Gb"-6$ZfmgOX@SfJH+RtCj8;7m33(t3:<>si2_/\VCenrGIQ2YTjX"l,`_X<4s[1YrT<iciZ+J80?G^4m'LD8>htS2=#`GH80eh9%M8ZTHF`dA*H[0c2rR'G.I^=@`o'5%u=$FgBKAZRVYQ!#$+4cJlA^\;RK9q1(ho1bSFP;d!nrs#5j=K2Zgg*&"XDa`FI^m!l5<^.G%?/Ie-rap:pI=C]rpXem&DP%&\s7#r.p&4aGh:^?Q5<KtDFsXkJ^;%Fs>$o!Go'jiph>=8=p%u@VS+EOXhB.9%n(?\C+4%]/s(97M%<qskmMsKQLp")OOqXVfKq<LQK7JVuDrQY3'8NJ=13MGF,GCTJVnakeih$kn0c"^?@q>Xmr`Rfm[s7WMNT<>8BX5D%.[nl1fj*s,h%[=-^%>cP+p?i9`co>enZOS\J,qY"8nq!cJ.`.#&,5CYYB]"5Kg1A$b`j=aR^l]:5Tf2(+YeQb`GoBFjWWSr>2I<?(YOWS.tl&=,#%qW6uFZp4"!rbjEtrEo><^C%$_B"n9@"AO.>q`LsSbeF!p>@7'rIfU`Jp><#km]Xs/f&S&_lb3ls&jGm`6VUd8I3V[+HoD>kj\c"@%fGD)_rIQ^#0^b"I^6i&ArR9<nkMNB?e,&u_rLf[$q!dq#e\;D`eEBtJ9T&i.q0N#/a4mXBSbU)U8"Ge"h-I1eL",AApXeS9Ndd5f%:G))'q8;sm-Wr-If?]fpBk=N`qYg$1g%d;eLUhu>manr*hYe*:HoIAi1#u>$^KcrlG"rg=X<h"SS@fuX:#0>`[AX4.[(;/he(;Hp%?ThYBIs(XXGL"b;U175E)q=H75<`=XcE(@MWp2h$Qi5Y:s4I<XM3e-*4frXFH(<_t*oGd]W+?;6l=_b$$I`A>IBS,ZrAXaGRX;d+%qt",2&,tndh:)3tg:gms`dI:S_td*oQ1O\,nFC>m+Fj!-E;1Q*I;g`1o]l;Lr8@5Fiq[;:nGB,alc\t;=0:-3_&oR.cF(_RCHFMj%\9\]=pisLObJF!Z7__0#jVP&i28@p.=R2mNmaLk$l'5;!V.Hg@107DB>?8L_E2R:9[-V("p22@,VkcFjd:Y'-4;Zg8Gb3&aSprC+%n).(L>d"YjA@rEoT@OP)kf)TY!h=H'iVE=rrH&%e+EcN?E:?#$bjFMICDirRR/hW>^-&p8]DpsnU@[=-5un0-d"0V!27J'^pN3tF%G]7nRnC?Rlq;W!4'6Ja&r-3:*q`G[0s8HSXHZ8Sh$1D_rC]D+q\GWk&Wig6kq!X^Da,B+rr+H8Z"h3(_lgsrbS\2W4q=\4pQ](2$%)ucaSf@@k9[<sZVohcLlea574h`o:`YA`j#Y1Fbfk$L.^lg*l;Hh@7+?8dLi6_00'@lF59l+nBbjRuJB3`t;/?Y![b@TM33BV#&Y%isK+!rH&2IR0ILHo05tLp$q!GBCtiliJs.CV+c"&(TZ:Ppin)*2YN5u&+69b]1Xg`kB^HI+3kt['7p')7A#%=H[ZYEffM1[=S/ut%mmH2qdttS5*L\Vrs0?:h0;h-DC8%i<crXM$Xl!K"M*Ga35PEY*;?,no1\LNfFjPQ='6/)BnGn"SiQboq(L.N_Uif,p*W5DSqu-?.%o?Ht(o968n]A*">#8cRoh;5W='V+DPJ+r?*lk7'9rEfJ$pC3"Ze(]dBW&h[rICH1jD!N-l51h?,Yk=:(lu2nWD+*GoCLVF2H1tbG%m4\5"]g'-qCjiKl#mW4\li6g/IP!eT_:@pC=XR"[FK5p^_ZD#EfB8N<r7H)@@1eA.Ge,rN^:a=;nN]-\6Y567ro*;9q*IKfQ.5R3%@40UWn_gI;p%RXM4ZB5?OU,&c.lWcHo6^;k01No_%o1^-U>L23NJhB@rS.2Bqt3R'5nq$K^AdPi?Z&'_?%7'ks0ccB]:O+l^Q\3e%=saV]cee-ZnMg-QYHOS[YQ"(NmeQk*gQ-Q*?Z9OV?Xp9b\Gb\nro8dadDPS9&$'X;m]M&Q=r+?WdTZ.,%o7W<=5/hB0@rEioN0Rk%HnL#)deN*:=7nZSIVS&BDdR?XG3=YR>R,aRs*jXaD_=#6];T!6ePu@)04&RJ/91?-1KW?To7+No&Md58,)%,:C@p[_f\+eN%=GiE%;6/g"cqQ+>e(^MGf6?uF0M[GFb1/_K5MX"Q/Z=l0._=d-S*-iMofUWG2to9uXhOVir#Y?.8R3J`*;]?umbKB$-`i>G]>+>8XBcEk%^KH!TO6c*BX8d^Ff(819&*k_`L)h-(qP-^2aStqI@2ReXLG6Xi%='?h*QI&W3#[g4PMpV.mfqsFGJQ_76rFb^1S[$R8+,$#\5W.Y%&)MU#K9&4lm)u!(Ie8Epa<19mJ*PpH+h6Gt#Vi-:6O>W/i@l7*j)>W+_tuD](VQ=^@n\Vt&o/KI@6BFfnKa^GpNpUF0)62Z9I](&%;AJ$d0HI"MFHTDJq`JDUI1A:"P]JIfjtRt?UO8S-nnEP[L>n(DTu_MeaK]0We2!?-E`A(B8NABkX6ABif2,sO2:k`A*U@,sWlOe.%T%<Yr0Y5Ym@>n\7o2s!nNoT)C1`h]*j6?>fmr17.L]/tI`kunc&'JBE*"NPjNt.3]:C^/2h]E:tm`6K(UNi#`nkhEI8)r"UdF$A3%dE0f#dJMt_fH'kLE#aqfEBZ"%a7X[>5!2"i5!D.j5!=@E17YifIhGN98NOs@jeSK,-\j'>-c[S^-`8?\:PVkml;,<34ADaL[%,^r%nau>Ckk+ZBjRi*:rSDmhaS.G+n)Ja4YkQT/pZ$TDm(LpIrq-0d^&LH%iMA![Sn+>NQY2`X]XMCF?_2"-p5Z]OAp\H+\mLiom4"Z>%Ht1IrVFc8_g0^:n:As>!mr@W"Rf&MMItId!q*3S[OTf'#JsY.U(ubFt[t>:$=[C-Ls$l75N19H5VEju+dj_sFhDcMEQ&G^_iE/S1%8:$9q<>hVW@jR<cUF$Blj!WWh2\&iVP$o**AUn=tA>l?3%(],m$pS>bb&dbhM8Fdc-pjHJ'RG)LR6*g];AfGWHSVitVH<Od-<bZ&%%%):-IMj,6";ti\#pD^6<]E@s,`uMeY`9M(&lG"P$Tjo:%$<8?7sjHn:^oaKY[/(L'J:,$'UBQ4'^6Il$]CS`UWPF8ABK-&q[1`f%aJ_0hr%A>.HXZMS0+QsSnGT>*^W`d\!t=(C*X^:s,"WPCPU.R?8f!JD@/h:s-OWOk6'`9%fI0Cpb(:;$pOj)W*b6RS7.p^`VQ<SP%$X'IGA25eTl\a)OFY#r(HBXeo0`F!>+pCB1$RZ7u$!ZhSS/3LgM(e/u"+i]H,Xh>/.5.bVm((ZM^,pY&]`R>I!Hs$!W7E<k8&Sb`%ZhLNhG5p[Oj.;`6-%L`DIB\DufqXaF05Q!hmVVA&G>GN>@:PN"Xns:7fu>rJc`QSaDJc^BH]S2tb+B@H3L2m"r,X99.*<['hG`Q%%N(?tD,:d(M`ZJ?Pn%%;bL>MBm/rJ-lrfNcX8baN_+p?ndN3A>$5;H6:PVj!oVj%K%e;f$_,iA'Q0[us!PJNA9^`OHW'8fp`:<NM:%&LX?-5M.ptrs28h:_n"u^Y_C#6.RdV3l_2[pd_2VV>u+!$Y6HW+(;*Xb!CilA'-=C+IP=hJ[fs>`rSOLPq^^artB90iYDNnIRI<J%nLG$!5M5Z2s2`&;U7;jn)%MA00_uV?p(:gUZ7amX7W(H%!FZAa9aKL8DFE-7F>K*I#TM3`m7Fl>SZn/F[Pr2Mg6?4[nnNqrg@7*G%SXRB]=BBZsIZ>->k2M/gcQE-\K\&GlYPrG^M[6Y+CmJdGj&<8P&_XUU=VI2;loC.T:WSHLjM4+-MrZf%4sP\#PHBM3p;fm`49Y'i%a>,,RPs[;t+_*pGK**'3rf9)*,A0)ZNW\Hff].p^E$h(NOA0leVDas5b&D%Z68hgEMS`a^_Qi>1FjH;)BSsW69#7b]"Af?/B`d.u%J5ans%W1sl]g(_p^W115S,SQ;pVlk&T_giqq%MNA8))j`mHi+Vob6*,7qfHPp@=mR3-Xm+gVHD7^!j?.&%60ogP0!NZ];Ik%st`X%@uig\m5`qPm+\u(D9?),4*40^oN/Nh%W=/gkF=tRo9i`llkCp^r$OL@IU(da&[VX@F[*lc>X_e*FjU.@Gs;[bcY`LJcbKCpTDr'n%o=kS+o.$nl\,,^2%]`7^s7-Ej='+"ur"IV_cL?1*!Jp.;o&hT?re%1,OehnUIKfQET39qUhlc<Q2d0YX+B7pV>gW@;Qk^jM;(.ZW%-nC3r%GN;"gj[ml\R?FGF5!gUEWe9-\[5XL_`#+^DU_0aUJQp(,L`mAY1/H)+g=hBK^GII==a6g^!k*?C0^O81%Jt,0^@Q2Z2!t7%p%i[si4$1>5Mu%Pl8O&sr7Tl7s8)'3_=,]geuQRC48@t'k5K\_M@?Php6s%oa#u+_o.U)dDm9dqY6(j-W7(]d\TdQ9\Ic7HLV;5h%1b8U_,j(Soo@qI[LWb/hC,fHR^@PaG3T=D<?a"$!8]94&p0R<bK;?Q$/bJ?:q;V:b07Nd?#Q>S4LBpBHg%tN`nUDNZ^Q\]tPPkG[%HG:a(^aB6NGA7;o!@@-5s6.@lhmLLKIehZZI.Y+"IWVr<s)2asjN=ZCH5@mU$U*d4PjM(Js7b/3[d*o:NLH7Nq8X7*qe:\Q[#:MF%e4`b3)`5*"RdeY;L^s+K*;IYnpB?fo(*+<:oOljH?(K[4afsT`U$p(*DDX\ERO'QVNt#RldhXrXRiWkj8Q&+fRbTeqph)OqD5eNR%J8sFS:O[GrGEd$hDkj5J<_#*\\_YH2/e4@6*0rbClsH7[Ng=C)ou&6\biGR*oGA*\,Yb>@UWN0cc-*2dC.i.'#?_$(\Jspc?/9FK%19Xcg[:!:mZ!dOmMVVIeA>uf@A4,/e,Q2Z1*cA*/[j=Y"W#]aO%9Z$o[qZ:T_F046?@u.<gZ[^YAbbQ1YZ_J#Eg]N12OCE#?Dea#%\Js&[6BrTCKZA*b.,>hXhX(jsSEl.mVa4V:^JS4f+[S0?AQ'SZX\LM"fNW^)gKK6jKrm5r2\tAZ;UZC7/-mUVCe=n4j&VZ8H)GV#%4/>5.g&%92Vd0A+M2/<&5'3"UQCXNl`2;aFD+J:\h'/F!Yt=oVert:F4WUkHon&^=m)F(@l3'E,WDdV1]!\J?Kq!a5XfHaAgS/b1%D7Sc^l?/'3)0!'k)m`4BFMi%kA!UngIY=74R>"iu,]k2IlquM#kt0]"l.2#%:?,%3p8ZkH3bCE3<hA&JH/"4s-P#pK`+(a76sdoD%4#h%H5;kqP40g10Cgc$V05aFF/P>36\>a+W&=RdbkP^rnc7<n6E:d+QlYnlBT+Ks4J,bkKf1SY7?QW"?]69#-S:gIee`0SXH<qRt%[n`);rRW%Hh4T7o&LaU?Ikb%Tg&PKYg^%h<a!^%GkBju?m\'NE1GsVe0s'jAi>;Ik0>BUGrS?S(5JHo"0<M=Gb!gMAE7btV\[fG>%!q5W>></\_>)qm_qJQ&bs)`_gC^%i/_3`U4iieu'\[T=:3.,s1haPB+qW[oU#lfBMJG\X<q!%_8lMSOW,4H]S(5Va0Vr>DR./^tf%k2M/slcTMQ*WCKmgNEbHT;:ufcVG\Un+g%7^YP764J'I!KI-0GH"'"K91t04c.ccXnK2Wj^UrFKOFMMKE(@87mlLu\&)5RL^\H&L%T@Q0a_oKOBcCkbus!d=0=)rla?.eiE*0@YLlGFA*7_-:IU$@!0bm`3J(I,&UhsTChh<dk1nF,#=7fE@R>jrW:i,<nGI,Z8#qu6B\%kC9r]nF?A?ir9hL+$9&<h=JP'RTCp;-Mt0do5BfeY)G`pMg,JV=J&t#m4eDi.JM$?rBY8LI]@m5h>(V`GCEZS<lphZE]MY=2qFTj%qKAcc^:J^giIAp4)<KUYqJc0S]&D?=j-/?<I(OU'K;6&j^R^s5GMmCMVj38+J+/Hk^YNf!hh_'Qq>b'1Yrhm3\^b6/i;MK^g%k%0%cfa2h='sk@5MpC`/jK.-@K!]bph@G<G5[c*e`l2Ge+nd"l`2BHB/ufMV?Y&jq8:[:]CUg$eHIV8]@B9tlJ=(KgN'cq=SBYN)$n*Z%0,O:;!H4:j#^E]BLTMSE]@`9hnb5fikI6NHk;'4W^IWEIQ`J0-Ip5^te:rBVh4NT.+65(nT!*Fo:Q'm7BEAj$^3Y7>IstT"i>d&m%YPq7;#gBd.NP)Xnk'-.3+5Zd%=Nl9TV:Ciq3e(=+cdt9%]it3O>LDX&KXgJjS][8qT7=>a]R%<V)Z83)jmQYS]:LWB5rO*oFbcTK%-.1@67c"?`[#r,9^Y7S<pAFdPE<Ed4J,I]K3O]U45JN`7,_oa0%\KB]VU8Udc`b`SrqrD7k?'%2Zh7,[l]$Vkj5H>3T0GkJUn5WU%Rh+i._s;(b`;&`rQe0B/oDCmDJL-B.f69G`fpOEu.fBTGoi-4##hsHKrG_N$l?`DTaaa<KlJdTDP,T*N_s68=E=X%kG<`2_Sn-f-%357Yl^"DKB`@&M]\2q?M&rH3o,p/a#mXADZcKIaVMsIEj=dZF#rFL[5oQRc_Hu\%Shq_)oLO7[0+((M.Y>=$8AtTQT0-PP+7DT5a%Lq]@e@[Y)k]8+T&jYhUl%Xrp%oJqCa0<9_NK/gBPrUKaSBj^iSp)iblSj#?q?J*tJ7Xlb,q=WL7cb&tjHS6*s^OEc(IYaUr3datB%s&l2SP-nXHI._`(o8?1nR,4n_fe;'"bkjcQDgh-fQb9R8fN7t3XY3(dHCWXQ/b3JR\XtaTp^*e54XN5->K*Lth]h+?mT.oadrML:%WA'[kk.u=e@K-rBs(QmU_>*0eT?P.NZT-Te('j`_iaDdH*:+I]r-$=J"2@ubK6`6#pBJD0cf&3F_7d%YUYk-=s&SYcjBfU^hR<iA%#5>]q\CZ,2DmHSDFS9jL`P1cHf[kNeqmt*^?ajEM=-8V]I'`g?M9!,5o5%fZl&.,_/oNGLq]&(K)iX\UB=^f,IU-9k:M+/33K3;g%LQR@Y)#<rno@l47GkcA5*^5L?LX4u>iNp%=p`(n-(0k,"I`fdG=oW,TnZ^9Wq9;AmK8YKo/q0?CLJ9CMZgpoQio+sgGj)^5(%(2D%m^\VZ#<RQeH2HV/+X/G8fK0S4T;l`m>Wt:<X&Ji%`Pc6K\$pRfP-dAn/CY.VO,krTJ/4[+j,6@W[tmVcr1oO%s7'IaQYUcFFt%BS%J,0"3J]G67\@?mRf;&DlEj$9U<mcQYX)2"]q69,3$RNQ;fW^Ue*j_p._e.#RFr+DRLNh&A^!?N@ZS$smUq\GsG&)(Gq?-:9Y$\C$%g0O2!qe@8l]-k1R?S/U(dX@hEmJ;/i3WJ_tAKS(Z#%,pg62588fi?/7gSb"jk7<WWF::SjYO<PshXq-Q(Q.&(>oLgH'o2\TDgpK^%oqf^@O!",H$NJ5e+(c&,-^9(k]Dprt83cjkDTBU<+4cdJ<.@7)Np9Cg4]2.aAJ\<acTTG!nG;,AiAKae3DH4BE;oJj>GC>pki>gS%+7J'$q4[,rmNV!ggS4XARf^c=Y!9e)eTmp5$Y'tO06\M0Y+D*!n4H"&MI<f<K?Qgg@(oKMZ%)*iFn'F]s)`BH)2`X?+I%/a\@?s(%0l!-RlcDo->HDPDoBZ)K:S1bWLKE+<V=#D=Dfr`s`p25'i)/S7:=Q@HR1,p&^@-Q]Hh]N]-Bsk>h*'[cpD[?fb3An9Z2C7!^":E8%]i$]_=-a:fcGFHXT*[0bTcTlFLT@>BoD?cantje$`VH9XoEdtT?K^gWg]rbqGcfocqXNkJgUDq7rr->uSt4KC"bhC:+niEp9fB<0%c_"7>GJLskfpb;r$I*WmlHVaT$=+gKp2UN[G&K6:iAW^"WT:Dq`7N2W><j))91A`?amR,Wh9bMO:+1.^dH[n@6RhZ9NrSlrD5H[h%04/T/`N7%XgrgF)&Zj%=?-u,GA\mp&LIHU-X3GGUG!+uk]^KT$2Vi/n><MfGraG@>j3%.*/,\XeWgD9^)EWFp@tc.sm).l[%9j03%55oeL0/E+la1(+Je,WY4hs]phJ%kf1S<7+GB"+uY3rSoEeQ3\RUkLVVb+-;9Kp8B(9hC-;X6s6iW[7N"=6e^ll1cu]UJB$cIo<c2%d7\@;,Mh-khp,l1(X%3T]Ag8W*Q&2-CehK)oM2nlE=\h!=+%jm(]*OTm'^,(h9tnM]m,nDGanSRMC['Cou[+"^7p"(s)<0,F7o.\%_iI<+l1H]Yq1gmSjGP+/ql8N.5!+A9H1nhT^F8u72tiJ)iQn0j+/)t5ECoZMm40YZ.nYTiQcI//M/FlRo1\#TR9ehELqc[1ZteKq%`u+F&0#lqXbps`UaknV4cTM3DZ2UR1Is:mY=%(+WeSo[.U,_t5mo@:GD&>;tq/ZfMP8>]$5/.F<:#ETl$[Uk)Du44$(I)fr;MT94%r,DY2ml3-^q"":XR>4NL\UVSa]$#HIg>*con0XPD70r8n160]L28JNmrJL!;eanh5`3L>3qnr$MLYMF$lW4ecp'olfOFP#p<DB)4%6h[L/?@TaLDc=P45#1Np^=?F[^V.4llra6c5MP7BmpBT!NK<o#bi+>hT4XkFl^r?O+>^^7ch-cY$T,."e!gg+!L@Z$kbV?.pYl%:%cQCEn=._F=bATUX/Fhh7&*:f$T.uN(o$[j7GB^N?(I-!t^"tW:]<0/XIChM<n^Rq3%5/7W0&O`ngH12aoqeT/*5:R<Bna<M\@VJV%9TsB2Ps+%=99Rth?F9o2dSP\Zb?$9CZeXWP#UFdZ]<,DDj_]20T@\RpZ8ZQ<EpSl#[P^g,7/OSJ20MaB[CjbCpO)T:TD:6"pSoYc%=%bnZ7Qfe=nqi2\#/Fjnp:`Nb+Hh69I_@d0EkMRKF%8Lj+29oMh-/!N-Y;tp1uR==q5[j]$GY=7<ej4&p@I/4hVUJ?)9X!UQ@2qs%Z8Cp[)Vs[a%/[:PWEjQAAPD-;SBXT^qkI@>ANr]LD"@J>!Q[$uj&fA3_.hX)(ON.LO2_"!bd\aHeIo1R!GtBABui]$Hp#F6G9Q`2%L*]gn;fDmt,PSaUmIlYK\>.B#$ZmkofG/*f,F)6X3s4'\n^d28msX!g]0BacEbn,(j_l?kp<A]R+3*YK!$%qp6=,m3!p%b&]2_<G%'qm*i.4bEU6"b]f"s)'X_mfbEK%>Q,i:f4R2aSR`L"5tZB8![g*4rZ&Ie;2Lqio/"**f%cMnKa6k"8]e!i/IH%6`YD9*f&-OUQ("%88D=\IHm2D+nAd=hCTlGO5a6iD]q)?WDD^cDQGW:]p(^Fd$MlO@0hRPKHTp35hJR.EZH'P->KE7g.'e4c4aKhYY3)KJH9WEm$0&m%PrM-D*L(*%$`7qCE!KnqU)<tlb7b,bJLI&;1W9LAA(nZO7bVKr09B!cV:mk+rP$T'Ann+KV%2OTnC$+M%E^+NTIOaeB`;t8-1AaW%/fFAm@"K<kP94S$Cf3,(49jb03E!PSPoT)qJgX*TIiN!:7qk<.`r[([??^5$`SO]80=EXr^2S_tYndCPFGW8%*oDqR83]j9LD8-K%JUC,uKi&\3"N<";i^DKQV3`i5O5!1mriSosP#1RXmEL0;S1uZ\P,18L17Me/+!N1PMc*aLe[WL4Y&$E$cAu6S+N`S:]S(RU$cIel%G^GZ0!H*%c-f#_sU4`t5Ja6r>l7!q67S"6aJZVBQ2Y>0kH4r`5NNjui[4#6OOVKq[f$a)3j"jmJ6CSp)D<!*>-[Rr!KJ*n_$#($6%8AkMPin"V`P#GI:1GK`pnYM.h"eZ!r<K1<%Q:NKVK+YBSBiT;K6o,6O-/f3/9hP5e66(*LXF-HcBfRNTSBhK\<AJ8oA$Y&>`YQ[L%dUEYY"MO!44CcjORn%6!Zn2?M6gQ_,)tq/\TLLo:c?1NgeC5njm@4Shm\esQ+<t@/0SXPlgIdo-$-,QEN:]<>,!/36)nCtjb_mU,%8Wel7q$4Os$79>!:ADh?*Cq>06VRZ<4(3WO3OqBL0b?XJm2d]#5l"DI6u%D9;+A,9`bp's2&WdN06e&-dW-rt5j0X0o*>O#4-'0n%1u6#MWMg5gjb!FC?\T.E$<@CN[+&EFlf9)+?kgoQ"WjO,r\O2C+P+^eiAs4`c=LnrAXG/bFB.MQOdAaFU!#fD3cpIA(Sn>tX>1[b%kg:=F&o:lb(&/h)/])g-b]FauB+CnF(RWM+dUHLl3:B"28lf&:MC@/gXa=8ma#b-JB5X,uU%J5oo>58aX*`^]4)EWrk>-:eh$st"%k$H,B)kf7#&3LUa0?`V/*ROM_l$V/Sl?/9NA#<q0Z*#AYZ<1JLTM6)f^>)&.F5l,t,ppj*Z$lk5K<H:'HI7dGXp[^ap&[@W>q)_J%UE(MP!_SUUc;eeT))dJ15Ul$'Q'?MO'-S=,o)K>'K3PEX0:W[QfU!4_EkXWdbQprM:.<fgc,1a,*cg(nF9=XR[gU*'K]R`m8aIc`%5RsbS(.MmD-cF:g9WABN5K5!n"lYr8Qd*^_GWePX*-L"8D")sC5,((S6kJ:q@SslB1jp0NM\sJPO>.&de2R#2A5#PqO9kA&#i:7Y%ihPq0!PuO%D3^g#Fns=HGGaM6`u()5&[E!6p1,.1:_C.>4SGU^#"3#Li^ZdPXP22q.?AqSXSUTeZup1N)q-.YKtKF3)q30Y:kW$5%j/g_coU,-L<::s!TN]Q[%/Nf&9<Cql0:q4g9,1"@1flL9P6T]K6El6n0i^&MqUAcZ*[[VY;D[.2VQJ]\R)\?#:FOVW7DEJ/`]hK.%@7I-]J+!*5,Xa'FYqIsX;b]&'pO't'nG>P9N0uak9;79A\^X$W<OC;gMks/u?e-2aP5sf."NHNaR4ojA,L,-5_NL?H(0Jp^P_2;R%"51:7ZR*bnBKRI`=[W;T(^pnJK)g^09+'Ssj01RBeKVAHi3N^tq_@WNhL-h'NV]4hWHpuqll89$YW;o0_,-4\?OE7:#O`&:'iR+;%-LgXh_n(E8mdK0D=<$Dub:R8]18aTs!U4gaOtQ==[mT677.HE(Q*[NkJ'n]B(J52eQRY]F]<GnoEYXf.&gY=Q</u3cdH#STD13l\%@Wq7QTrB7m\N:r"6.\1YJbakc?]k"g\Su1TGZMO':fFh\$P8htNt='XEcdRfgObY%)ILojK?*<\Bp@[$>p(m*eK6O\H*'\=h1fWL%Bj?`B\oi.d#4?5[!gOR"%2OoV+3[0:b%?je"AiX0l$st2Hi:$S*NrHTUU"\%`ZTDpm_1JXjZfF1:WOeiK[a6c<;1An/@8;"%R?fS%><-3,c:F7,=iKKUF`^>6\-m(.h/bjt!QS?1&(NJe%b60lS@UL6JC$4aEpEW8_a`+,jY=tlC'!f2:j8c@&kcDuWCK.4iYQ7m;/41L%3E*cg_goXBG:N*7n5&8--5V"L2P6tF0"biHSZ/GSYFO4ie2&kPW@+cWoeoo6T^=PCQh0nf;g66k&PP)#>_VIg*?@$Y1:hCJ@GT&C%bLmtus7I`Me<l#2_8S2g&O1cV"55qaGWB6PjNIat.qGHBZWT-f;3fUsQd].JAdtIX*6=422^:(R3!fd*qGK#b@gj7tFpN3=bg.WW%NZk@Bc;(7]UUdhIb\KM57d'V7ZK9\#c9`;&Y"P`TN>*nYEZ0)3@2h6P1^nQYcZll'"/)[$M&uB"/o1`t#/Ei:R=T0knkaM<%Zos"%Q[FPtZ7gPFP)r=L7d:2%?3ETWo;OAgqXW"7\^1WEh?oES1-+2G]D]r`Ma3P6Wl@+jh@Ff/1[(omAe,'M`#2ce`Pp,8,3!i30.>u1%C=t,`;b(37J7`egJ]Vgb5r4#6@8(NZ4.t8Jd:)=OR";-;K#[$>fIOAnLecW.C)Re-?ZaBM^R29oW]&qmLlJo=cQDo$eJGu,rQ@Fo%FU@Hlaao1:fpfZ)ga(o7FPtj/(Vg"ClL,K1e.Hkr])84P]08d<Wi62H+#Irg#=UVF(;Kd?J^Xk@X1l`=XpuYbUPRfs)4NG;[Gl1&%6U=eb6/.*IOV)VQ#[_N=BFPLrAbEYuR+cS>3`*n.+aadg,?1'8M$iWje\cbCh/?skNkU2R.^I4X`4DBeOn"[T#a9lue:<IjG@'YU%%:Q.ZPWmYB/^MMne;P8*XdV`I<gT\iS89@?9G)Aj^B"Z+Vej^AfGW_BSK6ZrRfF9`#7BQ1.o:aMnuP>F(]?j[8ZShm#$gNB<WfnZ%+ITZ?U#WHp)1W$\S!kHE7k<j#Ygk2p(;?%@BiB\C4?=rrS?J'2S4"LO7oVT#+po_1]Yg[Tl0ljf7bJRuYA/VBe/j2.+cM.d/:u-D%cS5,<Ag<:o75pt\5ZH8pJjb^M6N(Yn80IRL(G$sA.:IkqH4o_8g+aq1Pn0]=9;#,0#-oLhU=?/T3#('$4%cd)dh$gt!C\<Y_*4WC%?dH\SOUB#3B8&\?Oa.<=P]B:Y!a-->9&%Fr@e1;[FLEWiab3*fBUQZID2r7dUdQ+;8CW:E9[@>"B?G5.W_m%sLif`c-Z?bXnlsDl%h\+MK0<D'LO!53rGo!f\B'I5fW4sHfQZYbQosG!DLq'S8EYY[V?<p\SZE1$"GbkRFFP/qioJ`;:6>ZpgneeeWC-8^*%Q8A/Fp3T4%:",i:IU)%#F^4(?gUPI-[rIgNhQ16bEE:=Nl#nlg(o09]kc,A4Z'BNu:WR-B*#9-W0T8:Sl"cBBWWRor.JlI]->':[,.n6`YXQCN%O*"3C[ClQLaG>Jf!^%qt*bbrt(':rQ5cZn0E^Li`%>et''QD%]UM.SCPLbdmZ(7X^$dc<eS7GI9dEQ3s"!GTo+'!!(;K7uN#VD_7%SR+XgXl]ciX0T.Q\eH&B)Qc0u/G[dm'QE'R$`ZX+7kc]FL94+7f&1#hGPS36Z5B26m7^([UK%`s!.a:pDgk$@6kpRA5@iT1ZB`Q$%9*6S%NHDKQ:t3m3=<?`61g6pYk0Y6#0WKRV,i-9*[Q1Jf9?&,27HkNs/2cI\`?cMKP>RMnKE.t56\.fcabn`I!ef$N:ckW/].+eD%TEt"LK"n=2n2LfCFTJ"2lU.lf(=X"jLd3u<4B1Iti(UZqPSW^VL24hCUT-:=B!P?pf_WsKj9WgP,Qb4\aX2b*&htT*%\Oa/X.E'O%?!th^/0:od0Z5FtYY3(_^o>2)iAhD$&,K.Sd=i[a6*Lp#E[Kl*_+''CV%SgNEl="n%6/uj\SB\jh%9-HZEus/ejCj.[f)moC?.P^%E257CcJYWY62G:6_Zl@GX:WV^n0O9$"fS`-il"p!;D=t?8#OFKlAc$6,OgB./rm7?J8qNY\n(jhIN3b!b!]Al=PKo'o9nAR]M^Ls%?'-]kLpU-08f-?+V%tD"ZQZdf*H-uALF8I*WDFZ<:$3Y?3_i4Wb@mLpa;k8>lN(4L6,cAP)Q<ulTB3"Odj9r.N.f"==6260aRD9k%AL@i6>;oO0#bQ,$<q@JeWN%jMF-ZGL3b?8K\@=XqhUTmuBI=;$9)KOG[b=2^H%r4OGen`23&7dD!s@*o(>=&0=[b6U@Z`g.KQ1?>%\[MOIhm9cHOHNQH64KM"/fKLLE!ZQDnffm#Q4/'Eq#HO;<AGft$(t^dR&M8SG-a9Z+[cG<`#2$X/2?JAl@L`ri-M8lVut5bJju)K%_2#tjN$V?$:5/s\^]6OMP*aW?J.VP(1sjZI6;W-WJ["0=do^s'G,4&4\mecYO\8:*g@EFCXJ8YCWLm7](G/9\nX-&nXU$cg5pTG\%&dGR(e/5StgcQV-'pXO$2t\;/---`n2`3K%m<Hn.BKb-tq@Ogap>Asl4<0(.m95B&APA3n`/'D9j69j:FVt_qlM49]RFij6*EXWk%ee6Ku#\p+810,<X,cWSX03*`YTh!C%do)+4KV:aE(j7"KN-,u-.lP"!*rtdjfm8Aag)P%#"BfdjgDW57%"RQc!eg.o#F*u$!'!l-%eJq**muJ5:+G(s+53mT,O]njD=grgAq4ghm9E=<c+/+bNUI(.s3.m/(@m$]_dL%]oaWN.4)gm<DL8`H"`_$PB0rcgW2T@0J.;B"5%/s9R3*m8an5rji7(WB-_rbuo]D-p3V[1h=mm0qgNM/XRi+`P_]F9e&IU.NGUf#J*F:els:Y#.,r(JPW:gtp*<Q-mUQStoo^>=Im9%enK^Qms.%[Xu@q'DJh),5_u?L/Mg3+Ma*34#Ipc[aK<#['^ND-qN:\[a2dMKl@u7]l9gC(c&hO1d)`1-i?ob0@oc=&BW[u>WZO6f%NB4GfL>%.f,?n?sbcr3gI";Mp#*^_NMUR,g$A8Ir&=2\S`q8+V!\%+1X+8Y1(SS'gY*9V%j_:_pR6rn3"JF-,h11Es"dDna2Uf1^%,o"HP?CcO-iRhce2hJ2)>Ga,heMqPPo:`0,egOJtM9C"onRH-:4U/CHiNSYi:KZ&4<R93eLdLC4)TkSo:Bprc;(KsYf4(<V;*FU)%&F:V_htr^Q"6?9/Tsc^&/%\l\2-U@)^8_9kIW8=:1i=02NH`n,ZH^>'(^Uq["G2*.kk221@.ZO"Hq)T"9MP(mq4V[`FXa<`V.**O%*eI!,)%WJH#>>-/X+D2eKVt]XD:P,q`J?lf,TCa)*\JsE3pqlEk?=Ke0Ju(\_5`M8WMgS3Y?p99i9`WMOB%K2[,ZduNLZRTW3)+8%fm+d/S74#uIMX:_P1QFFh:Me"I1dArJ0iaa682S*?)WR20Wo?1&$]u=r.nf*f\lVm9Ng`EXKf-L!A2<q'<=I<VPG4>6e`daP1@N=%,/n:AGmm9j"+IEK=I5*9T>@Sh/["b=#DV2dlp*JJHD<l0K-&8QjBIs-^qV')J(e?KFC(LF3=7hhqaAHb5c49nd(tpRC5`peWC4d7%OVe>"AUmDT8q&ISk7O'Q-Mj85("MSLJ)rXiYHqSY>c<&71A8`K%OWS3DIfpke;1W'-\)dhG*JGg1=iIHin9#,#n/F&8G9dAo2a8r%M#g5tcPX"UHjp[)L&2kirN6X1/9#AE'e$6=-<;!X.o7hSksi^1GgP1X>>nuLQ3]bn9h*f[MoLOq6KX^VA<ZO%)[f#:<bNJZl?lRg%#47q%Aml@'K<O$hF%R_F*gHCWhZH1]WL-2XV.'PbSre_D^#30ZO\$NgLA4Ric#aEqLriWq*1_OH9+h6\CBg/\g]GR2[F:4L9J[iD%UO)P>E.8_s7)=W-'-^83UDhp$DFI)nW8(7:_eK!,A+N=3SWmT]+Z`$p)7;&a:G(SI,%UF7^o(S_qS8IM5\3Kpl\;F9BJ`/GdH]]4%`dA0(j+LWtS.mak<\+9HR+B'Q[MP/VZl%eCSMS690i<UCdst'cW3fMlmJKBCZ@4)MJjV^UoX'SBb%B!bPiFOa`=hR$o*4<m']!2J%8R!=@*@fF'n.WXHW\[$H"s+F;$<BVW:ph(1I=NTFL5/M*,o][fAVU2gRMcGuCD#EHMN!g[qcX_r,uV,))SZ=Z;(`!ap,e:pbQtrn%I]"?W+kM*NLlrTKJ'-9U$Z6@]gp`'d='L>m,unS&5Dlmh(VDc)9oWn'&TLV^;,^,b3t=EPSi.j":@)LIE+Z+f(n8YWWWZg?T#bLo%0+%ig*EK8:p'k4a^;;-`IPo\a'BN2O(lQf$U<Drjj)%t1W*;F<fERM2!:@gGP?4lA#=&9Q!q4:)4Nmif/j-I'5=o%6Y[UOWP#Y.b%,kpE%$R:ToCU^(@^_C"V#@.NT"0]]r?G41l/S]R5c;ppc730[Bh7WTF3s3,]B3QP]VmLYJ&#mO$r='=G4;A]$GX.CN,,uZ=VE=l!%K7OA*/eD4T9!_Qr7L9o;JN2*JN;KJd"toW+n\F:u1/Os-H@n_6J>0&EY`t3C#,%fk&`F0Z"/<6()1aZlk=nKq+0FhDM"8)nS7.%S%co3dgLdA[n([!g``%6Y7\j9,`?,M:t=aEIO<8BeVI6H1DH@BAkb.8U/kt-dO0/atJnSC'*Enri@7Tg+#S6J_!nLfpEprioY><&bA%,cog#<glNmU($??j;AOA0Z:,4UR?[Gb!pO&cAdja@!@DG@#3Wl1n#:gTF+W>@(p0Ym*n"kMQ6_#lc/#9mKgl]Z[]G5B$d1hb1sWP%Njk;[S]8P/,<$YH$TOZB"fc*fTRo,0lZ`Ire;#U8c)h;L'[N4<<Ve'+N"D!9p6GQY\6Cgjq[V",0Yau\O10s#$K]?[N^OU6UbL2Z%>,!Y-OS%O%$$n<C^Nnro&28B/&r![7%$AJmX<W%`(]ed?BWLluD$3ela4oYlNV":mX>&:h7]2h?4,XI(6dRS[Q3Dfsa\`g866^8.%1l+Pg9@?!;J74L;`A4R.#Vn9?HY23#)5LkMHH,GWX]1aHZ@cHZS-?"q1stQ1kH54H^M,:bT1lZ]q=4/dE.haiF[OGne\X3nOC#eY%3(DVT^r)Bg8m%A_(ic=Ij'ca8A*A3*Rn=\_cC[!rXGs0*+Ck8Zooh3f7+W7d)('%UYo2ce0e#.8Dts'^Zs:5rr'a8W%XnL01t4A0%!Fn_3S]l9-@Z>!iK4$[jb9(Z3Of)@_W;8Q;kQ`ueGE(X_h;IQFKNQ&"W,uJb+agl@>O/SPLUu,<I)8UVDBndF&,L?!8I`[&Kt*uu%(K/\Z.8$7#lB8kDqj"SSN17$Ln.[\7Fp*g@@QB\kc#tnn1>7Rq-85k>XLlIS7Xh9TOKdFSU]SOc`tbX0G8(3`K#Q937,6p&MHZF@%d4nl?E0G,j*-9o`;;GIL#$?Jp_T%6Rjb>K&o5(9FWd`6V(BAEr.prR5'\/,$R[YHWl;;:mpS^F8TM"<\$&)nJb^jZf'"sosXDn(A%ZV;%)^I5JsY"U6EMc;Ga!9&I(+&*<"6=1$Pf_5gei&;Q"hj%'`:Oie=g1$0&bW+H#pG89I*dhYQU1g%)E'UoKNr]Wj>>BTT,rR8M%0rN?.0-eEg@_;jr8QigF4W:`PA.FXV`2CF!HR!Mr9d>da)V!W@'Y4ao+-Xs6/L[R@^rN_G7T.,:I<n3X4LOAZaf.Lm%PF2N#.V%j%=eU3COYdn8V<E>?CpXBi?DG!DlNnFM:GX!>:SNeN63esUD4Gl5F(j-.F1uOPKWV-,]PAt*0F1\:;6F)+Jej"Ne?f4pD);?37JLa2%ba^[ZdC:`,ZPN/,$sRJJ1)0,AMF^jpC:8#J8(4UKJ]$$BLBr8Jj9]LCYn!L<J@3`Xk1!cuGC72cg"72bc.EYd`IGt>d)(7iI<Q+e%V21:_Q"TeERPHq@Z)d#<dC+5BX*NHo$FWp'@sM%hX%UO`&,f5i,;`P:,r@Ep<(4$LqlL`!T@7N(BMndrY_JBKGZASkdLN)hKP$dP%Je4s8Wp!EZA^V"X(qrBOVn,cs#'Y:+B@CBYBMrCV<NAq@s3qJ>\u@"\c,OQf?t?Se6\06f/N_VB_2CaAm_*tE^o(^0O_nYkNIbH%%gsLi;MX&o5.k7M_Nf+!ZTK3Y',+T8qMPqE#RqM>4A*cp+[!a$o!;4i%9Gt9JBB%Md2,8rGW.]ROMUm<[(iaBq#'g#io@_cTa2i]o%-#eE0G`6.sb$Y_u<!@99%1mL'"qc-,_/4SRV&OMGW3k2H"<uddI5Jp,(&.QZ2(gp]E2A2[UqjpG!Hb?KW,>_f'M3]YnPakbc&t7J%bp6btX1$Kr>150kkIumR;)U:kJDXNH9dB*r=u8B9-eMiUe1b+r$nL_q<,:,hSDmd#6_t]<^p-<N%ns3nE?ZTr'lVYJ6>$[^9CTNF%KWV78Q;+6PXQ!VK-PO#:dt*u#[INcf)&+XW_#Y)d!%[P7.PpG\hlKWtg<#;;g`ML]cm53?*=]Cb;obl)d<HHuGTUR5bkPpb#=@%t%/n=-<M7E5$W*Qk[^kRT<I=c88a8KU@Rt8C,31L5D&r1Am3fAd<A[9CiL*Xs3f%;.RI:-5=E+59Dc<?47UeZmn`b"?nW&"E2#1A$f%#oP;"TlE:SOOuK!CK?jh.pE06qQ@0nE7([i+h^as)L`K%:S#Z3Af@%?`p^?FXCXApbsTi]L*Oo#7r9,(oj$+BhHnj'/fV\P5gf0>%,*locK'Q$).bn6h6#Wa"T/mfZi4cUT'+GWrk'.1m2Oc1iaa>M)8+KOb^4gd2Z"^37R&=2q%+9IY+us^DgG@1@\uda&!5(>W!Hc5X%^*f='LP;!sBG3#+#4?snS&2uM%!2fEO!pj5o@dH$h6WT`KI3(*'oNrsb]#Wd_]nLH--lR&5tmu)-k'Rh28Iu#>j1QCL'[fc#pGtU%YL6*u/;'5FPT*V5b`$'A*F!2S#B?:>*k`n`EBGd^f.$&[1!L_'m^.'RSldQ9<]Qu8/oV-^>kI/qAB]X8363pVlA>+L3bu'pLTKp5%(?Pu@<7L@LXD)EZD#PArZYAhbqF>"##W+DfC'[fr:PPfu)C;/%-<O(P2>N,7$ZoQOobHE]N&)kr:n09W!*hAbOA5M/-!@IF)Ome!%Gjme_IkMOPLj=4&n3a:HqW>*Z5%KpJ%BMDdLdjKe$OVF=!geG%3h7_0/L"^"`gF0X!3LdS\\Us,0j'd"8b!KO&0AR'X;hel6n`Lr%/.l;S<PMqG.fn&^R/:F'#T=8o;-aPIGo8GpZPi'dD@Tm5aWudCjK2/3%m\u*F/h74+TShLXF\>q!6M2RQkG&'!O.4I,Fcf`[G*]3%0*DE;]WANi?-I`GoK(WQFW(%LPOX;m%^i>DQ:LDU[_faS$Yg6dD_bZK7`#_c[^8iHSCCiZ"WC#m1r1B)3HR"@O^a-)iIt1'OuTKX%,+G90\O;l?VSXm#2V$riCE=r]RFn@8ajYro[pXPS.0`0ld@AiPKRb/H7SVc?>6WrR-OtDOW6^EtDHsikbbg<(CE0?4Q0l3tK>hm?%c1`6RL-IY%>S6u&T,:eLe@=u]%N5F;B/"bm1f$LI-,gd^/J<N2G+9OfZnd9V,5Rf0"S8nHo;rMF3!fkMo+SrR5#ofTWNkccO=K+A%D_Oa^#E+/B/W7Y?Mqp-C6fgg$W'%*,#@'+H1hef_87/Hd4LA5f`SP:5rF7]Lr.r5uA'6X:__UN1RVhj[fT,2QaLL<j/5W/3,]/RB%EIX.1k);_M\Y7,_B<`t/pH&`gA9`sSFqmG)eI\cA"Ni\.gGP.#?Q#o9DgcT%ig)V-gd.KcLX'JDF/.9[X2W]KXek0_c0Z`a:fGh[%HcedZnVaY-NC/+;Zp].5pSBUDN6(Nd.r&Xohf/!g/"u+CB_e8#%AUoq<Ju$o4V`a.Oq^Gij-$(QfebCT'\/,9gTJ+%U29A6$h@.A%Xlarmj^MMb2-YHd"[/2e'Z],\U8F?Q.>Hjt>20O(B(39(9WH6e'4B3I*E)O0M^F'b7#sf%/4\0DfIeF:WMmh3Ag/'K7Z0CoMN)p2%8rr_L=CYq4HQm)hd\'k(]EK=T]]j[!!4Ai\@\g@>3&IG6Q4B:VO=$c2+n_+"h!")D,!bFJ:cHO-)a0Vo[KaaGOE.R-^`i;E4a4Le%8@O9ed4i1c68NFgVf>rb&'a8)7U>)X"_jiW[30@@%3$#2r*_PK>hok6+(?1Jj!N9m:LhV'd%!s5<,c2$"*k@q!0\;QhJ'Dlk//BN%_2fM#DC6dNp5UJD-Mlj*RNMfE/*(L`LGZAu28_>mOHqst(IejMRK/)sO?4eFR4hA?;_l2c(6$4Wb%cG1[^Bd9/!G@:McqH8DJ=^B%TFQ8hh+?uF2%FQaSnP^aP+U#VS<,9nMdfC!9pg5$WD7RBaFA+t8%MqBo&X_iW\KQM!Rn\/$]_PA:^uXT/ik]U[N/2u@Bs&f=g.mE%2%I)D0XdLg!glJeK'<-lco<';R.\282!+pWU-e:jKGN7tC?^9";?nr7%]d$?KKPe2Y.Fque?n+#c(u'Fcp/j8`;EZAa4W&/(5!UO%@V"#LD-sB\!iB81+=k.GLTT7hR*AD_bSO>qK1^:B`DjI39gu3AQ7o\9n[tRX@_H-HM4HAC\9j2JBkSJCeu%M=/^kolnmI$EcKdnU%3bHm'h1h9i&g1'3]0*EG1AJ5fmZO/eY)[?k<0/lLOcjj'+6gk73&]](^&["Y[AnM6[HR-a/[fK;q^*@S>nt!f_#ph2#,mW[<ipnY%h*N>7!=a<Z/>X,J]3'O,Z`4gSSYiX+=[K:"6TA$9J/cP'&\]j\gEEX+ri<ld]8q,mN"^](bFJjJkXr:9Z5$cg\fPkIW9ohnN5iAY%W-ns:MTMh,B5FJGq3tmsWpVdW9PAF`NaZ'OjMasuK/"RZl-2Y&ZegA5%qA`BZ\)tDW(QS(YDr#catssG*6mO2!S32>g!US]*IlOg%Jd%ZK%ZJP?_D]n-456hA<?n'i3;.JRA?KXRLD.+Y\YdVt:cIASR!<bR]-25i[Dg7*+`gAIok65gcV#p4h$ocfMO*=9)jtKqX9Wlp%a#"E7h$ocfo!lD*)ojinf<n`pGI<$U@AU/VK"B+?EC8@bc*_E=AIU>Ca7SW@%!A1S];N4BlBl7kXp*-R9$<]QpAGQYP!_,>qs&!u%Sd!G*Y@=N2DYC30N^G^eWM[pd(-FD'h9E[ae8`PV1=`a7O/5:MiLDCd8(d+lk@"aeC>5b(_3EEAGKaW@oc1IF9gc6i'5R&]MdP=_%cr=mp\!bg-"'^tYF`el:3U@uohDSL>j'gHu8Xd$$8&dUR/TRFm7a9nHep/kegIiJl&+'WW'lCWW6j#C0THt4%Brt5\jG[3/-"<@(%:24Z4?Lp</U_s>!UQh2$VD02FT%P[Xg$\B9cq@ZP(=tn:`h@N7dfJh@HeO1hES%Q`*Aq[^cSihP+7?/\$#dC1bf6ohB+)#kc8P"Q%=+<P7#bUtDhp'sKeBS7",(h%4G=;YsGPRd7.fi*V2*-lA=\"B0js<jbFc<Vc<_M,n3\Xa1E;P(22elWg&0q0jX#n!++r84*#baU7%oce#VR;:NXV\_[@h30gdjuCYSm5L-;VTjG`=dM!Kgo)F<B%3K["m!^qIC=X[-Qa.p&_&cqEs@2e<AN?j96T"ifk3IO1/ZfNU(j:I%eatTiA8VCr8$gQ9B)1nKk/<[oK\V=WSKBqefkO^WjN4L`h+g/?`@MM.Tt.V6\e^bB_%cc@A[-%h#;ng!$p.jOQj,:TV.plB+-bL^%1!!4Y]F$'0h]gkmBL,j]ou%K]>4!94^0&mgm8^KGRWc&TW-.0;]5Q8/c&7+"Ak8$o5-rbLL?Q#G:3>(P7sf,CIe/$]bS[_b+*X6l%Zs-1@g&]SEdg:;!N/S:2PQq3_cm7`+oO*:g*0\NVI@_d,<KUCNl*bn_Cs-V$<,^Go`jY)c4<\?1ABMs5)_S'=[&mUiYn8IO!)PJV%V6'J<cK7f:KVf`84U!DeP5FW?(#I6P0lj-@RUZ\ck[[=a_9<k>;<uF;6'j;Iiu)%;1;.?XQ#Z\[I@D_>B\DaYI$ojPPVjc<<3mbe%`(q>g%KuN+X$3RmYs?EK1#PIE(FkT:iobV>6)6QjL9*g5`b8,s6j@Q-dh[@KX5oM5Z0Z'lN0UmtJPVR;NSs3)Z`SQ-*bD=4H,GYh%'_>#&VGYlQbMP8/4X!`uS+YDT`J;Eg,u^&-C<^lk9fK^QpoI!_l>3Mm-Be&hTP757#[&uV4%n+)r="sjrm6>hU95i.)/)3p%%q8X%,P]t&;kmRHhiOh?XdVpOEEhc6#8"d2=P;?P9aoZ[6B&=C7q8U&-M3]^R;Zu3aCjQiZ<i;eQen_h<#`bED;Un$<b,sZ7Rn"_WoYb*%274Y2YMKj@$cp%DgT%4n,(armFkt9g<6QN%*hUlNkX;Sk@I-(^<DshRb@\]rf/>Be+^SS;dmu\jijaR/Za6ckCoJWGgH7/!Qmik0%+[J%<%@K8d;2_SUHQK:`-a#<9U$li8]?&K$6`,/fC=,JM>O#1-Cf5[jP@V/"kGF@$JZ5PO4WCe2`=+8ga#WG.4l%fQE9rP^0R&<^%l=N1+[73>.Ou:nrL-om.2WS[D]G`aE8W#4MUas9nC-Ssk+Ad$5kR'#8+gnd<b\M=5LK%hYh<Xl!.W2BI'G.ri+@n)>\s]d`B?F'q%.TO[+kh&`clM;<bA#h-0!.2"G!Ij(Z&;/k+gL^YTV"tZpKuXjhLmkOki].$_=*#SFkn[gIq%NOWm,IZo<\fa"r&[dqC`f<sdT5V5%e2>nt`=OiMMNUt*<XE7iZ:!R=;QXHQHT!&'e;jCZd5L"KX1dp%53e6r%7h$7Di!5``&'`J1+\Uq7&"sen0D;f^+r#&l.)mAD[M\4%,^VDX'o803\5a)EHK;&^W+X\<L1us5`pS%Z.`G+?!,H+n6Dn<&lK"cp2'H9>8nUls6cu@cjn=kAf4;e?L7E+L]L]T7Zc>XX%-bkP%YX/I9gY$`[X;ut39OrF.dllP3</K4/\"7iUK,2BE@_'u&a\"c.)qgg?M3]ds=gY2++6dH)b`L)'CtSMLT@X4@ir&HsMu^"nP*HW@%An`XcGNJ9[8mT&F;(U$qX0XM;o[N)#HY"OoADq_G00/98,MSsE-=lChYln2k&.=T4mLe0+n9\i%NG'\?RjpVuH*PD"P;*'cGS[p6%/Y1(0#s)kM!rNNQA&kp0eZa_IoJ4QWCFC#@Fbn:Z?u!kE;__"S;;(n[5;'C3!=U0!3+G?g#,t/?)>d;F1'r+HEL[2Z=2G)%&3gQr%XoJWPL!guf_-Su$PHK_#\8Db.MfpEE:O@=Y-JFR&-ah4-e'Mh43jo%sX>$K@B?=91#Z$VgRWd@0A$p,L9et^Pp:Y",OD\n,g;OPt%8]D75e:C>s\61:]A7nNJgo@4OH;3<*1JH<U]F8.!CJA>AJbIXd(IQI`Lc9rh*/cF'VN%[#3=$U[Xg75W^/!T1UsG>X"`D_7c]c-r%RL?YN]NCc=f!U@HXR"\\'tBb"Vn*)_1_PO15'.6^o>G>Y`afC#Y^.EJ/1E)uqnQ:VP+B.Ye!H#(DddH,qA-."P/7!$q3YQY=!SG,%na`jM:6\Klm2=/9MZrG=NF?YJP\9^&W7-E4crH!e5S*Gi-/`Hm7tI+fJ*lFO'o/m='VUa'Z=O`pAcn392k/ffQhWj4Uq"n/W?f#`%nEkXKY;)rR;Y/(oB(2(Ui`.H_.&0t!qE0cD`lr9>/!k+]\)o*%-SBIf<iTXtf<RkgZal'+2<$l\p\J^dTQ>B7+T^GQ)RteSK[3.h%9d>_V_a#BG!UTomSiMnE,(*`_Qr4K];M_GO1hCIMm+V6Z!$[@5hmgQ?YT":g;3'g!@BqBV`bq_iBLEL`fYXT'@E??EBaXP66.$5i%p*/`:7%e\pCockOQ!5F'\o`X@ZNs51DloRQ+)M%BJ"c(K[<\,K+FUV'!_A3qa,N/$Lt+qL^g=V>"p0U_5ZW#fiM\It`?Hie7#>)#%DJB=q`&M_JeE@3t1%s/+)2=mBF`)quj`:aAR+H)o(5+BNJaG3@Q+Sf</V]VjgADs9gJDE%p5Q=Sok>md'/:</0qA=ap$S;dA=A<b%k+fKLXP(DO68N$BFPgmZ;pF0*^$<%J5;^JFM:ic82K_?3hUMEH[]:(I/X-&mJSni8n'V3JL566$[U!lcpDWhZmHgE!U!q9s/&ID'%]X@X14Z_:TGF1+Z$"WJl0I[GulF2!+Rau'I]4ZH$3cFKjE]_cJ!6ieP<),T64/'+)pP;"Jk;:B?ZkiebI^*/[Ep_Y4SK=nG;lmLZ%ZWl!VgZrRiEM_RZ(Qe(Y)"h(T]\V%\0rB62a##2-dtWqE*3,=XNfTZmeW/D>o"eSQ-uPRmN)*YB-iRm+d/giEDm<u^s612!'Aj.m%;;uZ-)4L>d;!o0e5[5uq+ZfjkEVk('\H&)PYD`i7R_fA8KDa:+Y%DL#!A'XU_5n)e-RNoP<km;?W`M.5R+s5(%\(@)*TL1[-`kB<%m/+&3<PofSq#SaVQB'g\/"0JERq70!3.s_g:n-lh[J4@#Be;XL8=e<=^_qDiD[5J_cU^9KRR;*31g*ibeY\06;(2os?=7s16=]u$%g=_kM9kt@Bj3B@8ft)dO@.L7.:BA6>B,sg6jN59uWp2ch`DrP!kX5mC+ZB0H1Z.DeZ6j;lP_H'(Tm819-J/>V;*trA.j4FAhN1lE%l4@]'=PHNTgXIN6kS<Jf?,FMO'lKbC0+";>".R0g7SS0]BhTqm$b<,i\P\"3-_1RO1,\X(1]\LVV+H,sa9X\<9`TpqpNk9kc27+p%0Q:HC`GB&OMV0?0+h!O,TC%0+bn[q`dIfjk6*h%i.-4TgEhar,S[Bk2oV7irKlJZ=T+re6g(i1AbAj:@))E^.c>lfXRZ\WWEqZS.%\^Bc*;]4Xh)ff"Q[4@_P9?<f?MP6n1Y4h!Ne#8Q4<N6@o-Y.#*9__?DCl\@42V:1BVPO*.#;ja>QF/6$#-&sUko/cY<a5=W%VXFu%AE,;e&3KH"$Rc#"Sr(oG'3*Y>_VFV\RPckaCOL`5Sa:WSf=P0$-JX1;!S]]lQ3?k4Cj7mL7XXuu@snr(?5G"2@tT"eoA3a=%71rh%D2UM-n2F\q_XD0!?8`[(oFV3gd$:^AXH`\\G2/(;([oF&s&Gh+!V'`_#soO&$d/s;Gc'%r%P>?lL)Ep1ptA6D-t;)*6VL7YYld7s%G6!"H:$LV2HMR]L%>A]9$Rj$W^'+W@]`f3+Ilum<WR%m6\XNJS('9"JX;nF2k/\8oc;ZS/:jQf1liLK34U[&mNX8%?)E#OZ_&_q1%Jr7S*`G"mSMnd/V/A=8Aem\n4EZ3;g1Ii![B'fo9-9:]+1rrm]-bdHPLSainQm'&AHB);@=mqsT:pD"ZH%Z@.i0bR>-+qFpf%(9%%&*G>TZeDF,dl!6?d-8M5Hd=%HR/;*Q<3ZY@6bGX-doO_PoP`ndQkAscKD!,Uo/ihpXBeZt0qKE8$k78Z%@L^TgCkb?5t9DO%:[NU%O5II`-p?H@qA\ts_=FG3=UB8eC;2Fu->doRA-sNOLbN?`!XePWAg4*[8gD2>.46Sri+Sio$Da3GS3iAWP3dn(R>Q_U.Mt\jk+Q0B%cnGt6JlH\`\5CWt+rV3`2tDM.0'1V-An'\H+9V[X4<1X_._t(30M`;a%cRbG>n<Ti;A(f]_Od&%F$p$F)I?e?@K(]1]hW9J@U.(b%)Z\>tG>@-hjskm0Qnl:KK4Tsrgd]4]BSZ>Vn%"!CI8EHHYaMA^C*)J+B)>:XH!,7_3Cgach!I0?%(@1CS?;WKdgi1Q_&^=nP*nG\%]U)+"&jL<DEV=c8?l'>mR,OU8/#"B3j//t4OA3g'pEp=sg5/L(R:5UF$]&L_h,bQ:XMT/eNg\-0/6Wr*?GU0Ce-a20*3b%"+&pk`%W.)<Dm@+AEZY(r]PIIWRpGt^f(kkGWD!L&R<b^^?GSf;sFCY??H*5NVKG7r6BGG'kJN1'!27lE2B""%/ZX)>="n3HJf`pSqCUFr$%<R;ZOIN)E16GfW=VN+duf(7q8%cKQO[-FW)EVQ9'JXo:\$u^heZMLemJBDtcdgT6'+2oS2qoK^FGt!$pY_Fdt7#[VHYI9S84C%Z]%p(##?<dLcDNK_@36p"U<<*8I&ricRU1@hk"<i;#bY/'k2WiC1tKE<mhbB;Yb-44_10c0aG1<$>^j(Zq=m0k`nUHT#P\HQX#W5hp;%p.;%-2+`6J\i&NHlSQJ5Z'FpMd&*D[%gYs.6qTn/N-4IgYgBDhd7#bJBOO^3*OlcBp6Zg2F9#9B/'LjTg@a0&.ig5&d^?!$&bPB)%_1M&D7ZWK[E0SGBWZcg]Cl*!IVRT?t)BJ^*dD<*k!^Skq:#cP\(W&BSq;N7UVt$GPZTG&SA$@8Ops9RM,$gih'2^@n)IScXctD.u%eIZDlWLj-(Dp$+`#*&-1j_NRi7_<$o)fJfkA#WQ$akh0t'$cH=4g&,`XU=*<]V![$O]RMrLsm#b$tYCofM2)rB+6)WO^p-?C:4TQ%im?k`BRnq?<o<m]`b-2H>:glB)X<tnoMIX?hF0TaUEpA@id3pBBap^+7A$WhV!m\j;"V/#RFC9-"\n&5O)9uH@^'klr;cS,SnI83%I[+B2`;hn<Vg87T0.8X6ff\j>&t@fL4W80tLMW,:9]7fZ3N!G\[:,t,`Y@$J^R-1XGj!Z7d8Fg3l$J4W@&a!,T&)k,\7u_(Q>\D4%*`7tXed\7#an>^>$Q#B%!]>Ljp2S.oA23'"p$/<Y^XRs#Y\IO.M$C\-Qo4ks^V/*`FjK5cTk$4(W2mh2WIuZ2I&Bso29aG%"f:4D%]Y"i-MMjM'+D>SR,,glQH7;!IUXn:h8&?f%c:"lI6W32SV^kNlc,q91bIQ4G)(f2Rj$7aKG=/]B=YgZWJsm>*,M^0B=A0S+2uqKP%8_XH3K%/OMa&W5j()aq6B[UOjKUu2c)4D"2fN[p)ctn4>lA"%"2+(UBi?gBsPW]//KZ5UMbu/&&O277MeT;^b=<0WO=sZj[dJ6A9%FL^7_d%+=Cllf:Y@>8$#@'3[BMl*6AJ8'!d6q)$s`AGEAV+JMi+]Tq!-?X;ecihT!g;BXoNHOHRSq'::#AG!O>$<:X6^*tl+f8l"%b!)%mc\1C?=tRCp%Q>BZdQB$:@9[CHB+>D9Us*[Sg]'0KF+QFd]$o_d00mNqrJ*J-AlYI^U-##>l(n,VD-\aiL=TMP^sp5>i:Uct%2L$&-HSe6l`o"RXbH)+(!67h1X$trs&,7j0*.e9KR;+>;#3PJim]uPuVF;>^ZWi>d*"Jjh=f@?LikSN!/-:[%31N9m?">JrS1WUC%RMLha-YP+afJh8F_j<eq3"EX]((G*M310BdU5\<#_DENriaP=$lj@VR3BbesEYI=$j[I7bEh"GKS)UU/;&b`@`a-uu)-p#\r+CXt%"9s!>ArDkI?#j`S09dbtoUVoL7b>a;:j%LDbSJYb9Hh2te[adsN>?6/CnUnOc@7[9?&KUq`_)]p,dqni6-c-HGm<$KoM*`A>9l/r%;cj53c]IQTl<"CGl%C3=?^!G3V$3F`&<1<*L+_Bt?F3TG0qn6-=FcsV*tL/;$QDIol/WtU6Vek(#Fef7T$mG`ig17)MRD"TcdiZ%%$-h4u`74KK<$SjS/H0aGHLKuOr3$-"/2A5.V+('gTT1DO@\pEu8*4m%E+DY&2lA*k"kY$Q3jF3G5fLYD,Eac<hBF5TW*Hsg4NA_b%"'7([[oJr&</6/Re(H[uNkho*S[#t@!\JZOnnLorcgJdR$YTe2K[$`>4>W$72OLToNuIi1VeLBg'MucL:U"Ifo/4\+1QKM&.!P:(%[/Ceg(e>,2Q-"MPJm!9X2]j9]]/Vph$,HIA(MK`;*S$)dLO!#:E)ak5;&!pLe8^n]N.Rlpf2\3#F-Tma"5a)OC+X']@4%$OYC^]'%"\&sqQ,^K`fY^5K.L0lQ*dSBb?_+`51]6_/$XUou7:1od5\Emn>!6*<cqGkp7KCA/_Fu'(a>0@,n"Ro+K5XhKMrmOZNs8%Cj7<9p%fY`V\8KXi1Uj(DWp)>/ei`CH5Z-7V2ARHWG(\l3,3]5@-*oPkr3lF]OcIU`D%[q';O%o]QBFhQ\N1/%e\mWlA%s#3qP0&7OP0E>j%p$iVgBHIXl<p)8X5fiR6'qUXWHS/?Jo-HW6J]%h6!0p?.j!?.CA9-e'O(Ye>;0jH<;..@Rm(etQq$et]!m:"(Jtn*q>f;u!^n,8i%&puo8?ZP.<>R"l*>)&`H!3jG9QGbo]Lf@:G9GVPRO?Gd1-QOE_Z(1GTW3&M/2uJV]FiXn6RdgG\G1p"l!6cgrFLF$R0J\Pu)gK[V%:>Ze7'E\o!5L5^;S$+YYhJ'72df_SNe2Z@EP+r%1nTiZ/fcJ&Q<?6VYZ9H>2qA>7tK20QIknRiG5h)sP(t?/1Z?Y"Wj5U[;`XbOk%H+p.j0T&Q'Km&uH1S^_47(heE1HM)1\M<nk5rL7-Q%o#B2:K:gVdBGn?<_E<h"Y1*UN(:Bb5GGW)75j&kc!Tn#+\"\3Al1E/h&#)%7W,l>AgddJRT6COSiQ!r&ZD+kVT&28@uP%XT,o6Sc[]O1fAt?9aNBgL(8I]ggcW&B5.o05.`Un/%Z7-kj0GD^>qA8`(BjIWoK^l.%<7UR3AMoi3d$0RaW7i,U%?D)Q,6rnaaGaBmm!VW78&ac8N@??FH]*s,gi>M,'G*\H1u<16R&UUYNra:SZ;F!Y0j^tqp+;S\$%ir1%_4(uGbcLjP\-b5?cl$Q`*0&^\CMFrff]2Q6G^h@q_FL0iaZ_mTMT0Zj?ARn9:>0W=^e934?uPuu[jiNgRf^uCRhX>jLdqgm="^f8%dhOuYncnkaR?R60ht_);n6sPC0&=.&-DXWie=tJ(<M/mCVdt`sVb8p5N_B6H%_B_%/nq1aapP^(E\soi*J<k`&^06e8QS)()Ui>\%M.LQQ.Un:\SICE"bbdnn1X/7sNGu<FG6hA#l9/`I.2Ri\GQGrLps,V5kitCejsIB91&GGRRQ'Yh7.G,cN9:P9G7p`oM+(]R$E<B1%*aI>^?mj79Eo[r\AG6Gp6Ve\-$:Uh2N]%'8pM*.@8dup,n%]na!&XEXSj_[-d@B+8$o(To6*89&9!<56MWlAA^lZ:YG_=]E1GTZq%Pubo\0pqLX0mtbWVIe\]CD,PF-B9SLP'[[^q6]@j$]W]a.54r"/7'/RhB$X]!m%23@an>lNC&#83K9J.>feOcHUK6JO*].nJQ),I%FJ_=F2WuG(SLWJ'a`sbs/Hq&1E?^"h5k4hRp3,a%8?todH7':1&#Ci`5pnupV%'bf@+JUAkba3p99$mPa[m7D6`!/4;'S6dag]&*%^87Z#MIPDG;%)Xe2,lE0d6^('<R$cQn#D*(k!?ljPQ8aN4P:d,2N^7+[Z%2?0r$lq9+6Jk47Xr?TRceaL%NK6@LuE'%!QP";f#!)%':G"jlX7tn%:>T)El6QgK/B_c-Wnp/$tUB49#2e@SLQCi4^J:BH)>J<*Pkk_PZUQ<!7>'%gD)/X0GKso.dIb:j;Y#e+!T+3]Pob;%;]!@D?s+tV"Cmsi+;Mt2S"_6P:G?6+7C&=s:mQhGNqSi'OtcEZcm!(aTk;XV:9Y;ZB:t3CCNZBfn_W#DjBPPk64Ba`k^1+E=:.t=%<0l]:P^nnm@C#Mbbho+T4S*ZJ<(a-sjj,&IAlfmNLIfX+<UF'*FN&8=0i")(\EL&@[%10dcP^Mc>0#K[iA;[*03NMA<tg0L+p50]%p09E2:k;W,%#&Vbj+S=gR>KY)it)De"WI#I<uguu8_.iLoU$P0eL^I'^[f*Pik<ZPIgr1H<OW0tWf!$Ld."*%I7b>%2eHE9/1ir(%U4-`NIkUs6?BjV_gcFnC=nuTc`)%;^K>8aEaL6O?022bQ;jO@.,,Xd[X@DJp^r93h#\>TM^]mWKkVs$!k`9)H@a7uu))^+W6i`KU%hNHT&1CUp+69EGU_cJjsZ0CBNW2PT<0h4hKmDmd69?Ipu4#:qq<,tsc@)@I/eZQd#1pB(c90K,a);%c?QPd&s85`EpM@+u,=Y2ue%:DJr!qAl][?noAP"Cu0sV0QJ_SmCK:@mVDGCWREmW45So%2Psk-?CC%re)bN<+S>ST]=3l9pUX97Va3``2A%'VE8JfOeaIqC9_3o%JLliO$hI=$]?/(EOL+dM$T%A6V.3#G+)t:q7cD9E%TIYGQSY"4=O[mW5/T0C*(/kP88o%tSP,U8"I-D:ko9/_H9PK>aWAL&jm/(f%,?0W!K"98OI;RPUPn@DQB=#%E5sptk\6eqEFrK][F)C.E#9;&=kk*+;3%,FNq%*P=Kp8*^W>7Q"i4$E+K?2qI4jp4HAIGD3G];<'%DQ-f0RSTQeZ_jE&qW<;L<"AL.)[>jqKF)M4qd[h#6;%V:B'N4S3M#'kCK(TuBQCLq4ok66.Qju#bo7-'cS7U=!UoF8\cAmH)-%32%>rMhX[XFCfUbqe"NNT\M[4S#A/`i_CM-`=h]"3/90A0"$W&uV[dcmhNNiJ(lhJc,pp'6W/@$)A?;$%k%*NP=j!*B6"B!bA8%(Ttl%U71h:ajJV;bognp\/*@aVU6'uW,?L$;;$PJ5b#K%Cu1K=o_+:8fjJ'\YNJkHLaPib9hqcJf?V*-.g:42lIg]JSl*i.M"dqG)Z_2+%R++.UBFjX!(=*+F1#HWN[/n'%j]@KaOXcDeL8>Cuop+UEmI`qS$C8N0"OIO&K6Q$#qI`W1PY\cf3?4,nS1[DgbBt6#n0pW^K6F2b%ElQs!BA[C\j?1en?'TFV.aeDrgIp;,+n2(*[?MNIL-8QpBBqi_YHcVLN+\\W6jD^qm*c1eGb^q6<bY2o%.&q@r2:23Rc4Me'[)>4%WuB'Rk/0\B/H,U\W0u-qg&iR>m%FHE@15>/=R"Y/T(gnVBTBfF_)#5:mMhD>Ws>nEG/,n!?6b!#k1(it4V`X1N`U[5$rF2f,D&Ca%Z*4"-SZEg3)R$d$dLSo:Pr3/0PU9(dRf:hQOmJ?s=S..\f&O*U[IJr"ehabY>4a!(.-Wl]@>mK"4.+hgRc0HlAau.i-IF_UKHY%B%L)*IGp@WKT*<a-Vo,V<`CPr9\AB,RL1lOI<Sll`>7E;_Zi*<Ic,ee9#QK<3^>+04Ec4G\1+qG[\/l#C%P"eECoo1rYX5^AZ@Ip9'%HB-@gnYgD?\MPMUC[;*4Cg?d-T<BVQ+bg:QG#?=cWla+T`Z`U(fi.-OAk%`Ok@;]:g+/s21kT+lRmOgF@35mrlG\DD0g"D5]pWPE%@e\#YjA_RtSY[4Gp)KDTVZMCr>:i<=ehD6*A=G]@o6,@[?K[[$_t,*3ePkhE#[;r4;[,V50:^STXG(bMAoh.ek,Q[L+4XME,oY5D%]m&=>qi*mIpLhWU>_:=K<8eb^nUMJNokg#2mf-Z!&LE32A5PO&psnMs1R09S5-$1QXp_JMaN1O*Q`.sT@$q)VTL/Mr:TKeLV!ohb%GD##mKfbgjA$EE]RtDI[ZK2GQY/"s\].aa:)pFV,hh]JqoE(r1nM10chNa&lHnheFb_e[Lb+CJ"0ak6Ln=b&2"7N+p<-DSd`;17?%J.p&7K(GRE#MhWtcib(0/1;?4(]_nu(e8]?(8".P`UVfXktd-A^_`tm8cj?>Bg@6M'>oh#qEu4`6u@R/*CGO<P\>'P4D#h%!dRTU%2ZUFBSQX!!(>`;KbCKO"QED,<)pEpJeA?`t%[%S!03h05"8,db3CAbZ*Bib%cF,[A#k??.S^0!Q3:sF"ZnOsr@9m5deR4JH]$t,"%,<1fAfcglkA1D=R&*-'ckQdOt#J9cJ^_?rWZj7=/1j=KOb8N=ZoJU=#`(qAS#CAT?!Bc's":k,\En'jFEEF:S",;=8HLD*RBrPas%#)sX43#stSoB%enAQ2u@/0j#L7)m,$)Cs0ki,OQE3[2p/c[_tY'MH,Y'mmTRkB1qm<"gA@6i[5$$BH0_<E[865/'`s#)d77`bLQ5%1I,.L7b/+VdL91ZZV^L30@aPY6gH^$gR==kYsMHi)0OQjj'N4FJhsp=k/8LFLPacK,jF?EK&i4sJY<^0/=E/0+.CMj<p$6,FL7ku%AoJ5UBkX(b0s$,0=Wh7i;\f[uK(1g`)tS(XnYogUK]A6THYY5f6"/+C(#2+6be=+ro9jKJJT$C++fg^dY2Q9lPc/d:UiM-4Ghjuc%GWu:p]Z':L,9kg@*iBn4M694$:)3k6p]?V6Stq6>6p_Fno?_Bj6J^#Ye%LE9Dto:%DL7N!MYV(6ie(.],#JYuiGJU=RQhWcNjc4P%/NVd02b/3f&%2!'f1(\:RH+_B3G!:]fkT[6bZB/R.@Ld=S[=b'#V]<.&lLD1QERdPHA8r)Dq'jAl<=\nckkHB1It=u*ld!)X:EU!%4ktgFI2(q<_C`i<l4>fYZECdE&O2:4g-47Yg5MDcm1#h^9\0ro_d0%)JM;*ufp61_:$UKKFINJ6(d3Bsk_&C;*>.Y'?2]e0lMpq0%#1sm-Z<#u6<!!L#?ijaR$<TC[IH</]*L\i5VWlprj/+[<MeOEpqGLgR9?6:jK[q#i?E(A%%=J]2?K]8#"F#oZCN?._I*`%3Y2c1t%]n9Ds:1Xj&Wj(.]B4o[!GIU,h\<[R[lhCWGZXd3,6j)I>97iXY%qKIkoVeJSm"lY4,NF6c%WPL6=?%__?qm!f8jhhAN(%4ipf2(>%M5r+(I^D*-=>b;^!'uf^<]sjdd7j377,R.^0!X$jq#aQA41k8I1s&"d>rr3$._uT!JOt`6lN_g)dL$bHk4pP(]&te/@^gp(K04-]%ib1IY)^:q3%$h^Al0k!S4VfB5@Te\JPgiUC"P9A$ZYa902:B`5@pLn1`ia6rVj81!@i(6--@""]Am,Fu#2H`iqfT+d`7)&$YW':8%K[^621!P"]+.G.kLb@9"S0&?8l!**H(ot'd)do,mlio;j-f,a,X8)g_0g3L1Tj:A2P`9fC:qkC`(3L0U<.O+GFG,uuOu[(j/4:F`%6rX4^P)(Ln7Q.BqN:I=%XJU,""D%nn&5XILZ2Lk@i/bn7kbY,L]gWd4j_gcGY?6#aAX/]J0_<+eC#kWq[\dqpW+eka3C2>9pC;M4%$Vm>AVEG5o?<iPd>/P"bjGIe$W(d6Xejsjt%@2R5\"re$"JXVke1e8iFG#Z42/l$uBb6s6RgUD:BHj58$O'koH:@m:[QDJ;eNn-j%XmaA@E>e5A%u6om,9d2aD-j=QU9^6<0kBBIKES;8Z/FuhTYYG&AZ5S.W`+r`c+Wt55,]#l2[V7%Aoht-ckDR2;Ds%I'm3-q>gE/h%UY4'cI@)$Oe?>mLLdu+r2f4![PWj$3$]HMgb#)MOK_^l[>BIK1A6)rtk[:8qR3tJZFon$$!!Et7j2EUSZ?j@V`a[=4^gJf7,j2_j%P8eA;OG(Henj]I9l42sB"toNe&e)$mgtP(Y;uhBc!*j[d`-@R-i!5#.@Q@8i,KJ/l[Dc3X[\Ssj&gXMhZNS-R8c8\]i7/ndC,Y/Q%l0I&HmC8/B(S$!%MZGni4j@T&m!d.a#r'/d8KO*8?m$!pNFRp-*QX-$o(B?@V+>du,9r$3]hUL>`F=s(<imjq6<L`/;!Knt/Xuti%1I$UIqk0?"CrhVsA0T*=GY(33a;9Ei"-=iE/bll4Xai[uNY.k88k)XANq'!_=sFGkTr0#SgS=22hnJd%*>3e5!L6[0C%Cr6&4\LB%,!LW2-:lZgXji9)Y]p[m)X,>T\T3(Ri<ciD/6R+,TCN[d7FCD]#guuHd`(-$8"4A]U&j%qq[UqH-#kS4*Y:?P$u)<l>=@I.Z&MXd%9Ol00>YPcWYaZ/35BtVAl%eU*\YKCKeS[22ZM5ISV?2o,J5aQ6T\p_@kI@ig3#u.j+D)p@.Zkkq.[PMnaV:3]A.^R>FE+3OnZEi.%/TOp"o[J%^&\>X"Q1AO:@,O'^h?X+'ftNB)S0M50&hh:3;fsrNG.I*?Rk*_u:c(Wof5QDu2$O2`!$>]_14O+p2AO^)+i;Fhbm$fl%Y;OEpg(:rqP0T^WS)d51j>TLu;:!c!78Z#TFl8_jHbm3;\tS%dS*(-79Mu':,QZ5_W(`5.E_8tWg4$G$\)Dq/Y)GY]W;S^JaGNS$%3Rumq7e9L#2:RmtQr]V)kM%7`HBu3[p/H%SU_@:2k:MuUq^gUb%aJKD7$<A2[DRii`(3`(/on8`/HXG/6d'T0QHmkUi^&Q?(3Li4%IkL*OBG_OG`GVF=A?6X:XuG0'kFa9+=\BVaS8Q+lN:4c!$9'*XX>1XXX]51InJD\GIb8/phu\E8P3fNO$,`/!nGM8r$<9>qoW<aa%enje6HsoCe(]mPn?$jF7S,8_eBg8cNT.:ADbahOIG&plls+B^s;HfV"rLJld4j@'ShJBYk;?Lbm;tep8#j#K#Z*(6M4iU,OWrOR(%XJml)Xt@jGSJ%qY+&brRm:]ee&MJs)^!%L!4R(F%$uJlWSQ<V"XX]>rdi&*6bkd4NjSA6B?tSD-q[2=mV6:@/e1F'C/4'i:ib"fV%!b_l26L3]ARDk96QhK5j9tCnR#).90O9RncYjj/Fdb#,e7shaYGDYJbcm4(j<$)ZZW[fi7jdB-:^6Dcm*q*XG$lqklOFt9B3o_t1%[`EH1h*jheF-97d`3<1/b9Ss=P;Ieq^5lLGp:QiQ);9;AfN2%aCbk&!m;^j"/gA5+Nj;EIai/>KbbN44(,]E:^e\"1YdbV)SX)d+%!-k.F0A3YXJgfM3r-<EsL8e3JKXBgb`]-D-8W\aLX-6Kk\&JFADuk^"(VB!P(@5.ef9Bj+!0OY^PqYX_aQAVo#AjQE&,3(t(G4XD%6^*!Ycs!iJ;j9,KR7cg!dVeO-FD*l^:::LZ\t*n-a*"d>P5b-,Uj3`]qE)2AO!@TTXZE<jPb$LAD>bpR,08<s;"?LGN0`+=fL@WM%<hO1:l`N"JbLs/RM4M!`eLrd-].W`P\g.,n#8oq,$dYt;IfPFm`B+Qfa*^]4'r7ADc-9XV)-DnrYu7SXCn_qZpgP=ffec"JNmD?o%`+W#6Ts@GdAL0^2J&_Z=k)?)0IHm.`P=Em)DA@nBZHl@Ypp-4J+lKGXY^$d8GPPa=,.o9-1>>k[`qoA'7YI6"g8uM$HKf1-<#".G%POEeeHe2*%l@O7&.\36/#)&'X!nBP!oF_J=Rq!2OZ(ZUj&f5?eWredsi'JAJE[gXFH)L"K*ajH(6FAcp!%_k;:X)mUD17<\MWQ_;%A<m5h.8q6%MqE!A[;;Q!:%-GS&n4ro;L6Ye:bIFVl:N/ECLG6Ya<QsU3uhRPQ1mA:el,be.#>G,f&RWI)0nQse=:?$_PtZ1(PpJ>%/7-]ND;VM?U<0tp*9,.6e2IN#SNL9uKH.P:&#EB(4s+0,]3<853<G]#>[L*&OebKNBEYCr]BG@c]n.)eD:6+6UY_7l.uE10:^EU6%lWr`E"Z/^1/8l%coq^V6%**mr\:g6J0KU^KgL]:U0;gW]3UJ+g?B<qd/lht>&>^Q.BTW>R9`oo'41ueIU^/iXVqfGa)kBTEkpMS6%kQVd!'1[ZW'^b)BVI^@jO<@-nnJi!rgU9gP-ld#hcP^)(l4*\r=:+5:JA=)gfnWqsD.0h&.Geb?G;i3EUF<U.4ik'Ff6n:(8:#k4%03b&Rn5e=*?=Yl]G<uA]`g?,L+p-KR\eRN7ABH>:$*4Y;GP+U!nf0sc6pNhhh^RlRD!S,03jb[d7ut=Mfj86geCPh>S]k[Zg=(5[%e5gdV$U4UqmJo5h/t`BP>7l+;:"d&^qeFfl_^mg2$:@$`:\0\+*.o99jET;cJ?]ho@&iPOhLWXHF[3u;!,s'&SIRVe`n_q(lZ]t6%4S'&KObWtncB.Wc(6L'J_%"t![;$;ha7'N,4,_^<L)/I.%jrbKS7O;7^ENZ$g0XLtmZ?$r1W0Zad>Je@^-kLjT*=,E_L3Rj^8%Fm%gBXJoE=Y7WaF+ujSeBdr8g3dIDMSsXHMo7#j_#p""L,!hpTs;)G>g.7EXT\Oq[S4GM:+G6P0\$Fdf[htOh1qEqX6jje)9'J#[*5H%+4"VS73ht3a($4+6%LBOUHicOO?F:;fSA?jg;e-/#KL-:r5@Q6J\0=gCHE;&W`hC.Vfa,k)6rq`U&2D7_SC%3$m%Fq8[phdA[h,F%r&1,'2F!>14%hg<kr2aQR:&NU;?Sam9-nMr\\kA^(-p`3.JWPK(.3n'=R&_CL^/psPV5g:!WhE)AgP7VHi7Fp$Dt<_%QAdFL-4TI%]JpaMW8*>F!lK*Hn6>ZY?d+ELo6:%:Y`"6gMNRc==dpCUjC:79q:_9XL1I@S?EH)X9sWRd(&-Yi.>2IkH$rd33f:%^Sm*S`[DCf^%I1B-+iVc:Hig@^ci./ql8Z4NJ4>id)O.gI(Ak4Z@Mo\f6R)'a2YfLXmAk2r]Mo/-g=Sua7-cMD.kd[srnO+Jga58duam<MRLcha%%5)nIjXQmR,.#9qdFY9>BSe*4R:QE6u"e!n9_f8\p\A2J91e,;)*qZuF8b#%f-D847G.%2WX+Ghj:2]tCIUK`&1k8B:ZIr"9nT0g[%.]@AL_MciB]E[1aXj/+Mm+?Wh@na).TCf$ApF,J(PAe7W9Ul\#$"@IN<(Gko'WMDOT7.SfA-cSZDL5FsJTs$54YoR^Q$0:!&?V"L%K'9s64CtjukVorc9qA2WaRks.C_3P-Uf0kOl)Q0GDH5UCZOT".IZTNZ/<s8i]Ef9#3sc9u``1k7#O[abq@2:hD+k&RbRiYJ_>)^8%^]AB\gp@lXokj:AIB7ri$bK)J@ekbF)PIqc+'(aKMSIKW'3gL-M\Rpj1<'ZW$^s6)/)Z)*]dp[C4<Z`qNYScXA16$<:#QH.$FkN%%Uo!+&:gpMVj/86YX\VNkI[ahZA,4l$__s)r4AB)$i5&W3D.@S?*$[>,^LBFh5`0WPa7<<uauu'*X3*CF>D]8R7a7?UUF"/V#=;"^%]s*50<IJ_+"Imb=L*$$F?'-IeRUcWDckGoqm3bUPbM;_X;t>sO.*XcRLFP_4rHLX],b[gB$9D.cfiN[%dY(_BOOJTh+M+0T<Jhp4%d$.'+4&cNhGOs_hnj?EGITr0(=;[u1\?X3*?E-%NcqpV)qh5m(l7fP@Pq'5>8XXrsgQCV0PYe7>7!1kbY)6]j]TqG`@67&27o*ui%gFD'eh&BufAqH#%;'c#_s&!DUZ>Pl<P\aJ`#EBRoY.j#?,H92"T[&YC-F54>os7K_r0#eHPHD+7FcDs?.dkLje08e])-WH]M9_lE%SH]W\k$9O;1DRL-gI[*ApFd3RNte8-iQi=S#QV-O">HT`!-OL$Zm4A%OmTK)EiMol(E&FPB'9No<h8`-#-u$`nt,CtT0%#1MM3:H%C/+i;Gi(T"kUq\E$s62]0-nPDW+9q:6!NQ#?ZjlR5=F1pEr*YD+`6c-ZP\ns$H/gFFW7,n!,+f1+7K7M1$0M)JI<[Zr=uso<S(Dt%"+,tecgka9>4\-MMmiuIj8U==8b;BB;REXhpsd>33Akh;m@S#^Js^0:"(95)/_?<[<"a7J,n`,U]O&K'^X$\YK'.DcPO<KPc0KKi%TC+`C=FBtKH&\h>RLW,XbcaCbahrCC56L#=Z\^M)I1DW:CZt-g`4V\8Q/$ZZ.6#T=_cO=r]KTj>kBVL.X*'l_Lsl_>Od':5=i87l%ScI+&$.6CLI-j,j8Npq=]Ug9>#A8#KF,7ehj3%.;TQGS9dUtG))VSn'+*,eu-hXY'S(!naSQhl8krla/@nuoSE7WeN>"gPQpAK4R%LcLH)s4HWbnIt&5c(>#s)"8#L;BKC!Tile'W+)4GLG+%Q=a`8f:S5S?"N7C5+ZHWDPr,P8O88^%1-tb%RHEf;0P9trHd4@H<unK*%=hQl$Ho)G'[2(t=Z[*W2P*jd=%nuTB*\O9u5Kfj*om@T2,<e"[^5DjtP_7J0Dm?]abYE=tZ1>!=4OsO/knA02<qsAJ%*"N$TgqdE%:$Iq5\>LdhibZZ-:S-"U@@$%5*m)mJRW1sGJ>VstkZB[\=4$0[q,"Hu[TJjcAbQh%,H2eK94u?p,A\>6,^g5"o6F'jPJQjYR9[Ej%GX=3QCFm<H>eRP;TIcSbI&H(,a`HV[)+.WZ(OsI;1cY:)Bu'nU`OWhfE5YRsLm&]AEP\0h!-U<XP8V7[LJ"/^bRE\1c+3_0J1'pp%@KXI/]2"QXRb5o;R35(1R\gV2R*=6bMW=>>c#s\he7+06(0O="6S5TqKV]HoMjT%)Ms/NtMjPXC73G,Y#+_=PQ&j3cOS[P?nH'8Z%OFsS][#6p^p/=[+Ltd^qNU)B,d_nMgI-c>s[:Z+YmTnr@-pQf/T7jr_c/K<6$sEAp$]PrOHq.NQiD2]E^I(B`'-uOT%^YCDl'2e<%:QT,C]C>q6_Cqchm_UVP,LC4pJ.R0bL@?Q]_Cn[Ud=jdme\])D3R1//ZHU[D%X^&@EZ3<-Hmgp=$^hc:Jj<b[j1u$F.nPVnh!1s@%ad9E2Z-<\MNbBl'qr+:k9M7L?^b^e\'qdlaG0N];L>:qG@lGT.5G`;Zn9'NliYcYN-Kka!-E+J87))_fLE3].1YL8Mf;KQ@$_dq5%Y*F,Q(Pa-.F^UDYSfh:QP3"01%X*=.1.Ubf'@^t,S2R#+;Td)O!roa,QBGS7[9b?-@`C3nch]&%Ua_Z2hUqEG;%c<uDiYq'@P1D7%`NC_<p#^4`J8TtiW=hR$&=kjY;@nK/;goED>'@#BkAbV=7u%Z#rS2rK&tn:[a)'0E;5RI"QSt#PFTbR"FG0(#[E*B1WQ?^[MP:/#%hkuKVQY'-WkB;H%hl6l/S?4#L5^Z]123iT:W,:rd"+@*(DfXBsqCs/]X7PCH8ClJKoTmY5?0[9\PG"r-4ciuOMP.Tg3h-b.e3BV_%JFR*uGcgE]Q^`[6:Nb&,T=]G>FdD=r^M*G_PD0sib:\Qng_!BAN>/qrdc56X#NZ>ThYSuMf\'=fOr[DD<oTrSoA5145WV`Rn8n.a%bJB=C=R>F[MA2.ira9R_J6F'c)'PIn9BgK,S,2ahTj%l96A#%MTd73e6e.k9MsApi7.j"06SDb]8/,c?)3Wtkfr]k+/5eh1O]*2@%!-0m[-*F$4:L58=PTItVUcor6@i;I]&PS`:>*i0!X,+7I[oQdhSfTB)"\<Ld:2_GtS50YA&T=5%Xle[7)OD:(,a\J*^bS2dS&TF*%S-H0"+.3nSkJMnc2#;":"_Wt#V]9EXFPq\IEemSA@,PEeeP4JG,_t*!a5m*0.+_bN.E7_Jn0i,`6P0@,1V-'+ObmpoW\Rct0"fhn%6Z/.ciEkp"3JR'#&ClWta@&dC[Er6*0N"c_]0L_#Vtu;qHPd:0/+(tA&=j6mpZ,%uIY`h>Agg0bbBOO-]9gr/-dIg[2>-]%&X:NN%@6TqC!dW(mVKA1;3A(h[AEJ0lgNffi->[&DiRbW,/hTn0qB%KT6H%OK&mk/ujn3m/SSru@<0AhWa#JrtnO`-nkMjP3kf#2t]bGC=%ps2MLP9L"!6Q:5Fhc5!=#K2r_`0D1jH@%3^75N`\<:lPkHT)J,BVYJFSA%qtkG$6r?ch!bQERkaRTmKq'&q;Z&H?S0VQ5r&b=B\%%n54ROpaEj8HnPCte9O_F;9g(I;Up%`B@H,h?$fna92T?4A.]/O0KC+SL1$C\@_E%ZchSh&QZ<kc<-1ZCPi!cCb+Bs.b<HecQAePS%//lHDY@h^Ef.)\*Rp+sJW2jU#S6db8UMX)[cqS<l9r;"NmBMnVBR8&n1f=5tROGq/Ah*gce6+W:G-bl'nSo>h]_Zj".#@)\W+gmC%fKnSa*'<4M?N8J\G=&qa?Jq;X-Nrt0U8!UUU>Xe6VUHT3<'Rgr]t1K#*DkW*pEjuq[%Y5ol?oPX0cKTl/ERRmStJet7u;d$gAl]"%KX]mVoeQeWc<mG].Ti=F=>'FRa=g#``%[YA8,bV:QqiDq<Qd^t=r_c/hOQ'S`T\g=0'i454R0igbb5;_KVptW?r][/pj/+nmNoe)%h6*Tq]1?7\T_??i/A-lXs$c&PfXYakqBBj\)N5Q7aP^FSO(?H4J`b=TGe]Xs->J&AK$o13EI-C76rrA,M;S@(<(040OW.MIX;=8*%kq;)OPFqfu;KVn3GZ=uk\Q'VrNX)RO_!aW&c\&lr@DYrQLg\60j2b;t*hs;9r>p+2dHi\0Xe;/'=u=B4;earVP0a4L`06^Z0_'92%2NJ*aJ[gaB0)^1\m8.q7:N1&ejH;o/fW#`<e"(+uXTGm5>T.s5=#o2[J5[L"^dZ1h'pY31PsI/T5hEp[=Z-FKis@*>jW@7X]87H5%#(?-&*0-Y(.G'Tupf7V''//WY<p:Rkl?;f]RrpJiYP]tU@^'UKqg"!Sd+]pd='ubA!4Sc$H"E["e_DFm:(,&23kAa'FFmpHMb?G2%f`]r`^2<S;.9WR\Imd%U3\b*.l!r5eqS?J'1faj%SZpOGX]D*F\bB*lZuKhf38,`oKplh<15BQdTm?^OcU1Vs>Z1;4&\iG"QGOm<%A>\0k]*?c%'s>E@U@fh2S#_=M+rP##G&j!)AnYGmYX,cu(72IG'QXPk1U^c*mOqdo"RZR7@$^nEk?>cbXWh*>->5Ni/K&=RqeWc?%j=N>Y8j2*q*]b%i%_%G"[pjJu'ql2YL<n@+X:^"8bslPfQYkC?XAW,uPu/.o-)PikHKgga%\,a!CGd[WYL/]YFNrgSED&K**7*u6%q)M'Xp,l:j\K.0=A8L7m>.#F-7`"V&22dI2\U+"^Q"0e['@t2[nt(b+%L%/QQ4D:(ZiDp\I)cX?[WSpPD;*WO0?k0KgW<dM[9&Or%aC]O@a,H4)*sReAEX[lHGP3e]]X_0'E@FHE/s+[sRQU^!Z_>MKLs=N1'U-`._umGq"6u`od*X3#7lAD6[XRI[E]BIOVR,X,R+l<l%D#dFL0e3nh+EN+&N//hM._r2WYdM$e7W:WKkbXlei<?17]n`n,WLC0ePpL\B3X#G!&Q6M,O&6NC5k3k$Z)k1;g/fqJ,_$jH907O+%^BFr?'oEfGO(I"qRS_A4NE!WOA7W=$ZgPsf9m/LlHf>m1/,WMdf(.:p5JuR!9,XS-MmHqa75QOSPm%n-On/U!A^nSaBr(DLE)Uh)%[fSPC.-%!gdk$^[!<5m-;'E.2+f5c66WI?T$W/Q7!p#hsI;0E=._bL"S=jJ?H^+_AS*RpajSj7JA:0d?$f(F5$V6%9\i3->G0*+q%boU=e,m1"dg$L]FbII7mZEd*f8K.GiD0L4j$JtUDbf%KS9Wm:0HgpF3l@h_olI.Ou?g4C,p&L#>hDrE^>"'bO!_3O_0#R;EB4^C;%"&$<o9X`GD](TpfJ=Ue,i;(96T,le-?[mm6.[f-hBaM3p^gkP=-"dZ0`8N=X6T[Y<&@ogf33<H>cj:sP+!*#g),3kX!SpM4eo9c8%p(6\haDl07)E)X2dE]%U*#+POLeL*K&Sa?9,l-AgV#IU`1bCI,2+-X3O?l$#0Q\c7S.@F+1S8lT">ddY0-S4U?-@eUWb.V?(+Nuk%_R<DWYCuG^-JJBe[SKV3l/Da=d^l2)T]ng[R&9#5iijn,Oi-!/nQW.+1K;?*IJW=f*IRn@L[h@-C=#Ys-K//]-o<H,$IWaPW^Ah%%4dqgKgXF)PF$]MJPgY0^e<Ml>64O[V,+#a?8C^F0=ICf#DMQ*`]0C8$h`AN%mcaG5c,E);[R&HnK4-kR,I).(\jV%'!GVstmn^_V%J";N81\".]TQf]CCmm$qOUl!TSk5rj1K@kf-\/*?;96-q@uRnQ$!D(e^dDAl0KMMj*&a]U-i#GV;fcb]&DNBjO<?oE]j\X73m:=r%*nI4Bm<fb?$'D=jTj,dZe5Z5Q%ms81]\i*MNVj'j1Xg<rbQLF@=;f1-*Q,s'jY]58CLfp*?7V,BYM't`qM:)9e[6A=O.J.n5Q>b1%o@4^P?d*WkX$8`FoA8Ic5Mh0F\c4=rJgRXD]k&,9qd9AS7t,o5o6^E4j8C(7HeMg)qpW=XosZ%Cq<@eFhLGJ"pAK2bs7H/C=*NIq%ko1\sj_r;B2tuGepJUJ[J+J/7q%Nbt8,VE'e!JtK5;KuJ>PU2-jo4^js7^j>ruEUYGcCVSD"k]2G/pW^4!jjmrgPn(j#bBOhuCCO%qg[e4?G60,=6SD.s*B"_];IkU4e\?prnCA"p#T8Yrqr[lrSFtiIs`_@?%$'EiE]2CjhSUE)\?7;6EX\pa&fHnp%3AgQ:NJ8Y5Xui%U)UUH7'XLSp@3rU3^"Qm]Q!c"V_<MtDrn1;q;H8$\,UfAn(1?BI.@*Chn=O2na6&mhLBqLm\dNY^OPqMLED!Co_-c2J)((plFW,G%J,8fta7lcdqYQ?R%HRL\4T<;9^\Q](TDfpuXXH@~>%AI9_PrivateDataEnd